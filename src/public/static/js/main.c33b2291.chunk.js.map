{"version":3,"sources":["../node_modules/phaser3_gui_inspector/dist sync","utils/history.ts","components/Sidenav.tsx","game/utils/EventDispatcher.ts","components/editor/viewer.ts","components/editor/DeckEditor.tsx","game/state/OpponentHander.ts","game/utils/Math.ts","game/utils/Loader.ts","game/scenes/loadingScene.ts","game/objects/cards/dragableCard.ts","game/state/GameState.ts","game/objects/cards/boardCard.ts","game/objects/cards/CardGroup.ts","game/objects/Graveyard.ts","game/objects/Hand.ts","game/objects/DropZone.ts","game/objects/Board.ts","game/scenes/mainScene.ts","game/main.ts","game/Game.tsx","components/play/PlayHome.tsx","components/AuthProvidor.tsx","components/play/GameSetup.tsx","components/play/Play.tsx","components/Account.tsx","components/Settings.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","history","createBrowserHistory","queryFromURI","input","window","location","search","queryParams","_apply","key","val","indexOf","replace","Array","isArray","push","split","forEach","part","decodeURIComponent","routeTo","path","query","queryString","hasOwnProperty","item","encodeURIComponent","join","serializeQueryParams","Tabs","props","className","active","onClick","route","children","text","tabIcons","html","Sidenav","useState","version","setVersion","useEffect","LocalStorage","read","then","data","for","map","tabs","i","activeTab","instance","EventDispatcher","Events","EventEmitter","event","ViewerScene","card","flipTween","flipBackTween","screenX","screenY","backTexture","frontTexture","on","visual","front_texture","back_texture","scene","restart","front","JsonLoader","getInst","assets","find","value","name","back","this","load","image","texture","sys","game","canvas","width","height","add","sprite","setInteractive","setData","setDisplaySize","pointer","getData","play","tweens","create","targets","scaleY","caleX","duration","ease","setTexture","scaleX","Scene","EditorViewer","type","WEBGL","banner","backgroundColor","title","scale","mode","Scale","RESIZE","physics","default","fps","min","target","keyboard","gamepad","Game","decknameRule","DeckEditor","cv","createRef","modal","setModel","cards","setCards","deck","setDeck","cardCount","setCardCount","viewCard","setViewCard","isDeckSaved","setDeckName","calcCount","count","amount","exit","document","fetch","current","visible","onClose","footer","ref","undefined","shadow","Body","rarity","description","onCreate","keygen","Math","random","toPrecision","placeholder","multiple","onFilter","d","filterDelay","index","xmlns","viewBox","data-name","deck_settings","max_num_in_deck","emit","size","rules","required","onChange","filter","setTimeout","length","QueryableWorker","url","workerInstance","listeners","Worker","onerror","onError","bind","onmessage","onMessage","console","error","terminate","apply","log","postMessage","listener","clamp","max","lerp","X","Y","t","select","a","b","RandomNumber","floor","CardDeckMannager","userDeck","opponentDeck","selected_deck","worker","getInstance","addListeners","send","Promise","resolutionFunc","rejectionFunc","localStorage","getItem","JSON","parse","decks","includes","setItem","stringify","owner","ammount","getRandomCard","LoadingScene","cardManager","loadDeck","config","progressBar","graphics","progressBox","fillStyle","fillRect","loadingText","make","x","y","style","font","fill","setOrigin","percentText","assetText","clear","setText","parseInt","file","destroy","glsl","asset","innerWidth","innerHeight","setScale","fetchOpponentDeck","start","dragableCard","canInteract","hidden","handPosition","transialtion","angle","cardData","ogDepth","screen_size","setDraggable","view","reset","existing","setAngle","setDepth","setPosition","depth","GameObjects","Sprite","GameState","emmiter","self","observe","health","mana","turns","opponent","showOverlay","show","turnOwner","OverlayProxy","nextTurn","selfProxy","test","oppoentProxy","proxy","observables","CreateAblites","trigger","actionPoints","after_use_state","state","ability_int","affecting_player","GameScene","opponent_hand","drawCard","player_hand","attack","spawnCard","player_1_board_c","getChildren","damageCard","discardCard","graveyard_a","addCardToBoard","graveyard_b","addCardToHand","poss","player_1_board","activeSpots","getCardByDropZone","removeCard","ownerInvert","player_2_board","player_2_board_c","oh","getCardList","uh","discardAll","addCardById","run","BoardCard","posistion","graveyard","dropzone_id","lifeSpan","statusEffects","rope","targetSprite","targetObject","getCenter","Vector2","setVisible","setSize","Utils","Replace","points","setDirty","target_owner","target_id","damage","damage_type","status_length","from","can_attack_cards","can_attack_player","abilities","PhaserHealth","AddTo","init","toGraveyard","life_expectancy","kill","placement_settings","sound_cue_entry","sound","entry_particle","sound_cue_death","death_particle","setActive","to","onComplete","addCard","CardGroup","dropzone","getSlot","remove","Group","Graveyard","cardList","graveyard_location","dz_id","slice","getTopCard","Hand","cards_in_hand","max_cards_in_hand","fly_in_direction","rotate_cards_to_offset","card_offset","rotation_distance_scale_factor","radius_offset","card_spacing","dynamic_spacing","dynamic_spacing_max_offset","screenOffestX","screenOffestY","card_scale","card_loop_index","c","f","g","h","j","k","l","o","n","m","p","q","entries","ps","getCardPosistion","calcCardPosistion","DropZone","emiter","setRectangleDropZone","enableDebug","Zone","BoardObject","spacing","items","addMultiple","dat","card_id","zone_id","slots","check","getAviableSlot","zone","newCard","settings","uuid","online","debug","gameState","plugins","install","SceneWatcherPlugin","PhaserGUIAction","shader","setRenderToTexture","gameObject","dropZone","mana_cost","spawn","ogOwner","KevinOnline","MainScene","autoCenter","NO_CENTER","global","createConfig","gameElement","overlay","buttonDisable","OverlayObserve","subscribe","setState","OpponentHander","Overlay","disabled","PlayerStats","selfObserve","css","opponentObserve","Component","setMana","setHealth","setTurns","src","alt","PlayHome","showModal","setShowModal","setCode","Footer","position","DEFAULT_REDIRECT_CALLBACK","replaceState","pathname","Auth0Context","createContext","useAuth0","useContext","Auth0Provider","onRedirectCallback","initOptions","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","createAuth0Client","auth0FromHook","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","Provider","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","cdMannager","userReducer","action","logo","status","button","opponentReducer","GameSetup","forceUpdate","useForceUpdate","isLoading","setIsLoading","setDecks","host","setHost","useReducer","userData","dispatchUser","opponentData","dispatchOpponent","setMode","useParams","canStart","useCallback","getDecks","info","picture","noCache","renderItem","String","UppercaseFirst","shape","defaultValue","deckSet","Play","exact","Account","loggedin","setLoggedin","sub","href","handleSubmit","Settings","onSubmit","Item","label","labelAlign","MainMenu","App","Boolean","hostname","match","createInst","cache_id","checkVersion","ReactDOM","render","domain","client_id","redirect_uri","origin","targetUrl","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c33b2291.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1692;","import {createBrowserHistory} from 'history';\r\nexport const history = createBrowserHistory();\r\nexport function queryFromURI(input: string = window.location.search): any{\r\n    const queryParams: {[item: string]: any} = {};\r\n    const _apply = (key: string, val: any) =>{\r\n        if(key.indexOf('[]') !== -1){\r\n            key = key.replace(\"[]\",'');\r\n            if(Array.isArray(queryParams[key])){\r\n                queryParams[key].push(val);\r\n            }else{\r\n                queryParams[key] = [val];\r\n            }\r\n        }else{\r\n            queryParams[key] = val;\r\n        }\r\n    }\r\n    let parts;\r\n    if(!input) return;\r\n    parts = input.replace('?','').split('&');\r\n\r\n    parts.forEach(part=>{\r\n        let key = decodeURIComponent(part.split('=')[0]),\r\n        val = decodeURIComponent(part.split('=')[1]);\r\n\r\n        if(part.indexOf('=') === -1) return;\r\n        _apply(key,val);\r\n    });\r\n\r\n    \r\nreturn queryParams;\r\n}\r\n\r\nfunction serializeQueryParams(queryParams: any){\r\n    let queryString: string[] = [], val;\r\n    for(let key in queryParams){\r\n        if(queryParams.hasOwnProperty(key)){\r\n            val = queryParams[key];\r\n            if(Array.isArray(val)){\r\n                val.forEach(item=>{\r\n                    queryString.push(`${encodeURIComponent(key)}[]=${encodeURIComponent(item)}`);\r\n                });\r\n            }else{\r\n                queryString.push(`${encodeURIComponent(key)}=${encodeURIComponent(val)}`);\r\n            }\r\n        }\r\n    }\r\n    return '?' + queryString.join('&');\r\n}\r\n\r\nexport function routeTo(path: string, {replace = false, query}:{replace?: boolean, query?: {[name: string]: any}}){\r\n    const location = `${path}${serializeQueryParams(query)}`;\r\n    if(!replace){\r\n        history.push(location);\r\n    }else{\r\n        history.replace(location);\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {routeTo} from '../utils/history';\r\nimport {LocalStorage} from '@visualsource/vs_api';\r\n\r\nfunction Tabs(props: {active: boolean,children: any, text: string, route: string}){\r\n    return <div className={props.active ? \"active\" : \"\"} onClick={()=>routeTo(props.route,{})}>\r\n            {props.children}\r\n        <span>{props.text}</span>\r\n    </div>\r\n}\r\nconst tabIcons = [\r\n{\r\n    text: \"Home\",\r\n    route: \"/\",\r\n    html: (<i className=\"material-icons\">home</i>)\r\n},\r\n{\r\n    text:\"Play\",\r\n    route: \"/play\",\r\n    html: (<i className=\"material-icons\">play_circle_filled</i>)\r\n},\r\n{\r\n    text:\"Deck Editor\",\r\n    route:\"/editor\",\r\n    html: (<i className=\"material-icons\">edit</i>)\r\n},\r\n{\r\n    text:\"Account\",\r\n    route:\"/account\",\r\n    html:(<i className=\"material-icons\">account_circle</i>)\r\n},\r\n{\r\n    text:\"Settings\",\r\n    route:\"/settings\",\r\n    html:(<i className=\"material-icons\">settings</i>)\r\n},\r\n];\r\nexport default function Sidenav(props: {activeTab: number}){\r\n    const [version, setVersion] = useState(\"\");\r\n    useEffect(()=>{\r\n        LocalStorage.read<{ version: string, for: string}>(\"version\").then(data=>setVersion(data.for))\r\n    },[]);\r\n    return <nav id=\"side-nav\">\r\n                <header>\r\n                    <h5>Kevin Online</h5>\r\n                </header>\r\n                {\r\n                    tabIcons.map((tabs, i)=>{\r\n                        if(i === props.activeTab){\r\n                            return <Tabs key={i} active={true} text={tabs.text} route={tabs.route}>\r\n                                {tabs.html}\r\n                            </Tabs>\r\n                        }\r\n                        return <Tabs key={i} active={false} text={tabs.text} route={tabs.route}>\r\n                        {tabs.html}\r\n                    </Tabs>\r\n                    })\r\n                }\r\n                <footer>\r\n                    <p>{`Version: ${version}`}</p>\r\n                </footer>\r\n           </nav>\r\n}","import {Events} from 'phaser';\r\nlet instance: any = null;\r\nexport default class EventDispatcher extends Events.EventEmitter{\r\n  static getInstance(): EventDispatcher{\r\n    if(instance == null){\r\n      instance = new EventDispatcher();\r\n    }\r\n    return instance;\r\n  }\r\n}\r\n\r\n","import {WEBGL, Game, Scale, Scene} from 'phaser';\r\nimport {JsonLoader} from '@visualsource/vs_api';\r\nimport EventDispatcher from '../../game/utils/EventDispatcher';\r\nexport const event = new EventDispatcher();\r\nclass ViewerScene extends Scene{\r\n    card: Phaser.GameObjects.Sprite| null = null;\r\n    flipTween: Phaser.Tweens.Tween | null = null;\r\n    flipBackTween: Phaser.Tweens.Tween | null = null;\r\n    screenX: number = 280 * 2;\r\n    screenY: number = 200 * 2;\r\n    backTexture: string = \"default\";\r\n    frontTexture: string = \"pyro_kevin\";\r\n    constructor(){\r\n        super(\"Viwer\");\r\n        event.on(\"restart\",(data: KevinOnline.CardData)=>{\r\n          this.frontTexture = data.visual.front_texture;\r\n          this.backTexture = data.visual.back_texture; \r\n          this.scene.restart();\r\n        });\r\n    }\r\n    preload(){\r\n        const front = JsonLoader.getInst().data?.assets.find((value: KevinOnline.CardData)=> value.name === this.frontTexture );\r\n        const back = JsonLoader.getInst().data?.assets.find((value: KevinOnline.CardData)=> value.name === this.backTexture );\r\n        this.load.image(this.frontTexture,front?.texture ?? \"pyro_kevin.webp\");\r\n        this.load.image(this.backTexture,back?.texture ?? \"default_backing.webp\");\r\n    }\r\n    create(){\r\n        let {width, height} = this.sys.game.canvas;\r\n        this.card = this.add.sprite(width/2,height/2, this.frontTexture);\r\n        this.card.setInteractive().setData(\"isFlipping\",false).setDisplaySize(this.screenX,this.screenY);\r\n        this.card.on('pointerdown', (pointer: any) => {\r\n            if (!this.card?.getData(\"isFlipping\")) {\r\n                this.card?.setData(\"isFlipping\" ,true);\r\n                this.flipTween?.play();\r\n            }else{\r\n                this.flipBackTween?.play();\r\n            }\r\n            });\r\n        this.flipTween = this.tweens.create({\r\n            targets: this.card,\r\n            scaleY: 0.2,\r\n            caleX: 0,\r\n            duration: 200,\r\n            ease: 'Linear'\r\n        });\r\n        this.flipTween.on('complete', () => {\r\n            this.card?.setTexture(this.backTexture).setDisplaySize(this.screenX,this.screenY);;\r\n        });\r\n        this.flipBackTween = this.tweens.create({\r\n            targets: this.card,\r\n            scaleY: 1,\r\n            scaleX: 1,\r\n            duration: 200,\r\n            ease: 'Linear'\r\n        });\r\n        this.flipBackTween.on('complete', () => {\r\n            this.card?.setTexture(this.frontTexture).setDisplaySize(this.screenX,this.screenY).setData(\"isFlipping\",false);\r\n        });\r\n            \r\n\r\n    }\r\n}\r\nclass EditorViewer extends Game{\r\n    constructor(canvas: HTMLCanvasElement){\r\n        super({\r\n            canvas,\r\n            type: WEBGL,\r\n            banner: false,\r\n            backgroundColor: \"#F1F8FE\",\r\n            title: \"Viewer\",\r\n            scene: ViewerScene,\r\n            scale: {\r\n                mode: Scale.RESIZE,\r\n            },\r\n            physics:{\r\n                //@ts-ignore\r\n                default: false\r\n            },\r\n            version: \"0.1.1-alpha\",\r\n            fps:{\r\n                min: 30,\r\n                target: 60\r\n            },\r\n            input: {\r\n                keyboard: true,\r\n                gamepad: false\r\n            }\r\n        });\r\n    }\r\n}\r\nexport function init(canvas: HTMLCanvasElement){\r\n    const app = new EditorViewer(canvas);\r\n    \r\n}\r\n   ","import React,{useState, useEffect, createRef} from 'react';\r\nimport {Button, Select, Input, Card, Tag, Modal, Rule} from 'shineout';\r\nimport {JsonLoader} from '@visualsource/vs_api';\r\nimport {init, event} from './viewer';\r\nimport { routeTo } from '../../utils/history';\r\n\r\ninterface IDeck{\r\n    id: number;\r\n    amount: number;\r\n}\r\nconst decknameRule = Rule();\r\nexport default function DeckEditor(){\r\n    const cv = createRef<HTMLCanvasElement>();\r\n    const [modal, setModel] = useState(false);\r\n    const [cards, setCards] = useState<KevinOnline.CardData[]>([]);\r\n    const [deck,setDeck] = useState<IDeck[]>([]);\r\n    const [cardCount, setCardCount] = useState<number>(0);\r\n    const [viewCard,setViewCard] = useState<KevinOnline.CardData>();\r\n    const [isDeckSaved,setIsDeckSaved] = useState(false);\r\n    const [deckName, setDeckName] = useState(\"\");\r\n    const calcCount = () => {\r\n            let count = 0;\r\n            deck.forEach(data=>{\r\n                count += data.amount;\r\n            });\r\n            setCardCount(count);\r\n            return count;\r\n    }\r\n    const exit = (save: boolean = false)=>{\r\n        routeTo(\"/\",{});\r\n    }\r\n    useEffect(()=>{\r\n        document.title = \"Kevin Online - Deck Editor\";\r\n        JsonLoader.getInst().fetch<{ cards: KevinOnline.CardData[]}>().then(data=>{\r\n            setCards(data.cards);\r\n        });\r\n       \r\n        calcCount();\r\n        if(cv.current) init(cv.current);\r\n    },[]);\r\n    return <div id=\"editor\">\r\n            <Modal title=\"You have a unsaved deck!\" visible={modal} onClose={()=>setModel(false)} footer={\r\n                [<Button key={1} onClick={()=>exit()}>Save and Exit</Button>,\r\n                <Button key={2} onClick={()=>exit()}>Exit</Button>]}>\r\n                    Do you want to save the changes?\r\n                </Modal>\r\n            <div id=\"card-viewer\"> \r\n                <Button type=\"secondary\" onClick={()=>{\r\n                    if(!isDeckSaved){\r\n                        setModel(true);\r\n                    }else{\r\n                        exit();\r\n                    }\r\n                }}>Exit</Button>\r\n                <canvas ref={cv}></canvas>\r\n                {\r\n                    viewCard !== undefined ? \r\n                    <Card shadow>\r\n                        <Card.Body>\r\n                            <h6>{viewCard?.rarity}</h6>\r\n                            <h2>{viewCard.name}</h2>\r\n                            <p>{viewCard.description}</p>\r\n                        </Card.Body>\r\n                    </Card> \r\n                    : null\r\n                }\r\n            </div>\r\n            <div id=\"card-selection\">\r\n                <section id=\"finder\">\r\n                    <nav>\r\n                        <Select onCreate={(text: string)=>text} keygen={(data: any)=>`${data}${Math.random().toPrecision(3)}`} data={[\"Common\",\"Un-common\",\"Rare\",\"Spell\",\"Trap\"]} placeholder=\"Search\" multiple onFilter={(text: string) => (d: any[]) => d.indexOf(text) >= 0} filterDelay={0}/>\r\n                        <Button type=\"primary\">Search</Button>\r\n                    </nav>\r\n                    <section>\r\n                            {\r\n                                cards.map(card=>{\r\n                                    const amount = deck[card.index] ? deck[card.index].amount : 0;\r\n                                    return <Card key={card.name}>\r\n                                                <h3>{card.name}</h3>\r\n                                                <p>{card.description}</p>\r\n                                                <div>\r\n                                                    <span>\r\n                                                     <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\">\r\n                                                        <defs>\r\n                                                            <clipPath id=\"clip-path\">\r\n                                                            <rect className=\"cls-1\" width=\"16\" height=\"16\"/>\r\n                                                            </clipPath>\r\n                                                        </defs>\r\n                                                        <g id=\"Symbol_96_1\" data-name=\"Symbol 96 – 1\" className=\"cls-2\">\r\n                                                            <path id=\"Chat\" className=\"cls-3\" d=\"M5,8A.945.945,0,0,0,6,9h4a1,1,0,0,0,1-1,.945.945,0,0,0-1-1H6A1,1,0,0,0,5,8ZM0,5A4.951,4.951,0,0,1,5,0h6a4.951,4.951,0,0,1,5,5V15a.945.945,0,0,1-1,1H5a4.951,4.951,0,0,1-5-5Z\"/>\r\n                                                        </g>\r\n                                                        </svg>\r\n                                                       {amount} of {card.deck_settings.max_num_in_deck}\r\n                                                    </span>\r\n                                                    <Button type=\"link\" onClick={()=>{\r\n                                                        if(deck[card.index]){\r\n                                                            if(card.deck_settings.max_num_in_deck > deck[card.index].amount && cardCount < 50){\r\n                                                                deck[card.index].amount++;\r\n                                                                setDeck(deck);\r\n                                                                calcCount();\r\n                                                            }\r\n                                                        }else{\r\n                                                            if(cardCount < 50){\r\n                                                                deck.push({id: card.index, amount: 1});\r\n                                                                setDeck(deck);\r\n                                                                calcCount();\r\n                                                            }\r\n                                                        }\r\n                                                    \r\n                                                    }}>Add</Button>\r\n                                                    <Button type=\"link\" onClick={()=>{\r\n                                                        event.emit(\"restart\",cards[card.index]);\r\n                                                        setViewCard(cards[card.index]);\r\n                                                    }}>View</Button>\r\n                                                </div>\r\n                                          </Card>\r\n                                })\r\n                            }\r\n                    </section>\r\n                </section>\r\n                <div id=\"deck\">\r\n                         <Input size=\"small\" placeholder=\"Deck Name\" type=\"text\" rules={[decknameRule.required, decknameRule.min(4)]} onChange={(value: string)=>{setDeckName(value)}}/>\r\n                        <section>\r\n                            {\r\n                                deck.map(card=>{\r\n                                    return <Tag key={card.id} onClose={()=>{\r\n                                        setDeck(deck.filter(data=>data.id !== card.id));\r\n                                        setTimeout(()=>{\r\n                                            setCardCount(calcCount());\r\n                                        },1)\r\n                                    }}>\r\n                                            {card.amount}\r\n                                            {cards[card.id]?.name}\r\n                                        </Tag>    \r\n                                })\r\n                            }\r\n                        </section>\r\n                        <h2>{deck.length > 0 ? cardCount: 0} of 50</h2>\r\n                    </div>\r\n            </div>\r\n          </div>;\r\n}\r\n\r\n","import {routeTo} from '../../utils/history';\r\nlet instance: any = null;\r\nexport default class QueryableWorker implements KevinOnline.QueryableWorker{\r\n    static getInstance(): QueryableWorker{\r\n        if(instance == null){\r\n          //instance = new QueryableWorker();\r\n          routeTo(\"/play\",{});\r\n          console.error(\"No Vaild Worker Instance\");\r\n          \r\n        }\r\n        return instance;\r\n    }\r\n    static create(type: \"singleplayer\" | \"multiplayer\" = \"singleplayer\"): QueryableWorker{\r\n        if(instance === null){\r\n            instance = new QueryableWorker(type === \"singleplayer\" ? \"/workers/AIOpponentWorker.js\" : \"/workers/OnlineOpponetWorker.js\");\r\n            return instance;\r\n        }else{\r\n            instance.terminate();\r\n            instance = null;\r\n            return QueryableWorker.create(type);\r\n        }\r\n    }\r\n    static kill(): void{\r\n        if(instance !== null){\r\n            instance.terminate();\r\n            instance = null;\r\n        }\r\n    }\r\n    workerInstance: Worker;\r\n    listeners: {[name: string]: Function} = {}\r\n    constructor(url: string){\r\n        this.workerInstance = new Worker(url);\r\n        this.workerInstance.onerror = this.onError.bind(this);\r\n        this.workerInstance.onmessage = this.onMessage.bind(this);\r\n    }\r\n    onMessage(event: MessageEvent){\r\n        if(event.data.hasOwnProperty('name')){\r\n            if(this.listeners[event.data.name]){\r\n                this.listeners[event.data.name].apply(undefined,event.data.data);\r\n            }else{\r\n                console.log(event);\r\n            }\r\n        }\r\n    }\r\n    onError(error: ErrorEvent){\r\n        console.error(error);\r\n    }\r\n    /*\r\n        data needs to be a object\r\n    */\r\n    send(name: string, data: any): this{\r\n        this.workerInstance.postMessage({\r\n            name,\r\n            data: [data]\r\n        });\r\n        return this;\r\n    }\r\n    terminate(): this{\r\n        this.workerInstance.terminate();\r\n        return this;\r\n    }\r\n    addListeners(name: string, listener: Function): this{\r\n        this.listeners[name] = listener;\r\n        return this;\r\n    }\r\n    removeAllListeners(): this{\r\n        this.listeners = {};\r\n        return this;\r\n    }\r\n    removeListeners(name: string): this{\r\n        delete this.listeners[name];\r\n        return this;\r\n    }\r\n}","export function clamp(min: number, max:number, val: number): number{\r\n    return Math.min(Math.max(min, val), max)\r\n}\r\nexport function lerp(X: number, Y:number, t: number): number{\r\n    return X*t + Y*(1-t)\r\n}\r\nexport function select(a: any, b: any, index: boolean): any{\r\n    if(index){\r\n        return b;\r\n    }else{\r\n        return a;\r\n    }\r\n}\r\n\r\nexport function RandomNumber(max: number): number{\r\n    return Math.floor(Math.random() * max);\r\n}","\r\nimport QueryableWorker from '../state/OpponentHander';\r\nimport {RandomNumber} from '../utils/Math';\r\n\r\nlet instance: CardDeckMannager | null = null;\r\nexport class CardDeckMannager{\r\n    userDeck: { id: number, ammount : number}[] = [];\r\n    opponentDeck: { id: number, ammount : number}[] = [];\r\n    selected_deck: string = \"default\";\r\n    static getInstance(): CardDeckMannager{\r\n        if(instance == null){\r\n          instance = new CardDeckMannager();\r\n        }\r\n        return instance;\r\n      }\r\n    init(){\r\n      const worker = QueryableWorker.getInstance();\r\n      worker.addListeners(\"send_deck\",()=>{\r\n        worker.send(\"send_deck\", { deck: this.userDeck});\r\n      });\r\n    }\r\n     async fetchOpponentDeck(){\r\n       const worker = QueryableWorker.getInstance();\r\n          if(worker !== null) worker.send(\"request_deck\",{});\r\n          const data = await new Promise<{ id: number, ammount : number}[]>( (resolutionFunc,rejectionFunc) =>{\r\n                worker?.addListeners(\"request_deck\",(data: any)=>{\r\n                  this.opponentDeck = data.deck;\r\n                  resolutionFunc(data.deck);\r\n                });\r\n            \r\n          });\r\n        return await data;\r\n      }\r\n      get deckSet(){\r\n        return this.userDeck.length > 0 ? true : false;\r\n      }\r\n      setDeck(id: string){\r\n        const data = window.localStorage.getItem(`deck_${id}`);\r\n        if(data !== null){\r\n          this.userDeck = JSON.parse(data);\r\n        }\r\n        this.selected_deck = id;\r\n        \r\n      }\r\n      getDecks(): string[]{\r\n        let decks = [];\r\n        for (let i = 0; i < window.localStorage.length; i++) {\r\n          const key = window.localStorage.key(i);\r\n          if(key?.includes(\"deck_\")) decks.push((key as string).split(\"_\")[1]);\r\n        }\r\n        return decks;\r\n      }\r\n      loadDeck(){\r\n        try {\r\n            this.userDeck = JSON.parse(window.localStorage.getItem(`deck_${this.selected_deck}`) as string);\r\n            return this.userDeck;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return null;\r\n        }\r\n      }\r\n      saveDeck(id: string = \"default\", deck: any[]){\r\n            window.localStorage.setItem(`deck_${id}`, JSON.stringify(deck));\r\n      }\r\n      getRandomCard(owner:KevinOnline.Owner | \"self_and_opponent\"):number{\r\n          switch (owner) {\r\n            case \"self\":{\r\n              const card = this.userDeck[RandomNumber(this.userDeck.length)];\r\n              if(card.ammount < 0){\r\n                return this.getRandomCard(owner);\r\n              } else{\r\n                card.ammount--;\r\n                return card.id;\r\n              }  \r\n            }           \r\n            case \"opponent\":{\r\n              const card = this.opponentDeck[RandomNumber(this.opponentDeck.length)];\r\n              if(card.ammount < 0){\r\n                return this.getRandomCard(owner);\r\n              }else{\r\n                card.ammount--;\r\n                return card.id;\r\n              }  \r\n            }\r\n            default:\r\n              return 0;\r\n          }\r\n      }\r\n}","import {Scene} from 'phaser';\r\nimport {JsonLoader} from '@visualsource/vs_api';\r\nimport {CardDeckMannager} from '../utils/Loader';\r\nimport QueryableWorker from '../../game/state/OpponentHander';\r\nexport default class LoadingScene extends Scene{\r\n    cardManager = CardDeckMannager.getInstance();\r\n    constructor(){\r\n        super(\"loading\");\r\n    }\r\n    preload(){\t\r\n        this.cardManager.loadDeck();\r\n        const width = this.game.config.width as number;\r\n        const height = this.game.config.height as number;\r\n        const progressBar = this.add.graphics();\r\n        const progressBox = this.add.graphics().fillStyle(0x222222, 0.8).fillRect((width/3) + 150, (height/2) + 100, 320, 50)\r\n        const loadingText = this.make.text({\r\n            x: width / 2,\r\n            y: height / 2 + 80,\r\n            text: 'Loading...',\r\n            style: {\r\n                font: '20px',\r\n                fill: '#ffffff'\r\n            }\r\n        }).setOrigin(0.5, 0.5)\r\n        const percentText = this.make.text({\r\n            x: width / 2,\r\n            y: height / 2 + 125,\r\n            text: '0%',\r\n            style: {\r\n                font: '18px',\r\n                fill: '#ffffff'\r\n            }\r\n        }).setOrigin(0.5, 0.5)\r\n        const assetText = this.make.text({\r\n            x: width / 2,\r\n            y: height / 2 + 160,\r\n            text: '',\r\n            style: {\r\n                font: '18px',\r\n                fill: '#ffffff'\r\n            }\r\n        }).setOrigin(0.5, 0.5)\r\n        this.load.image(\"logo\",\"/assets/logo_transparent.png\");\r\n        this.load.on(\"progress\",(value: any)=>{\r\n            progressBar.clear();\r\n            progressBar.fillStyle(0xffffff, 1);\r\n            progressBar.fillRect((width/3) + 160,(height/2) + 110, 300 * value, 30);\r\n            percentText.setText((parseInt((value * 100) as any) as any) + '%');\r\n        });\r\n        this.load.on(\"fileprogress\",(file: any)=>{\r\n            assetText.setText('Loading asset: ' + file.key);\r\n        });\r\n        this.load.on(\"complete\",()=>{\r\n            progressBar.destroy();\r\n            progressBox.destroy();\r\n            loadingText.destroy();\r\n            percentText.destroy();\r\n            assetText.destroy();\r\n        });\r\n        this.load.glsl(\"shader\",\"assets/shader.frag\");\r\n        JsonLoader.getInst().fetch<{ assets: { name: string, texture: string}[]}>().then(data=>{\r\n            data.assets.forEach(asset=>{\r\n                this.load.image(asset.name,asset.texture);\r\n            }); \r\n        });\r\n    }\r\n    create(){\r\n        this.add.image(window.innerWidth/2,window.innerHeight/2, \"logo\").setScale(0.5).setOrigin(0.5);\r\n        this.cardManager.fetchOpponentDeck().then(()=>{\r\n            this.scene.start(\"main\");\r\n            QueryableWorker.getInstance().send(\"ready\",{});\r\n        });\r\n    }\r\n\r\n    \r\n\r\n}","import {GameObjects} from 'phaser';\r\nimport {JsonLoader} from '@visualsource/vs_api';\r\n/**\r\n * The main object of the the interactible card that is used for placing on the board and is used in the Hand Class\r\n *\r\n * @export\r\n * @class dragableCard\r\n * @extends {GameObjects.Sprite}\r\n * @implements {KevinOnline.Objects.DragableCard}\r\n */\r\nexport default class dragableCard extends GameObjects.Sprite implements KevinOnline.Objects.DragableCard{\r\n    /**\r\n     * Object that holds the position in hand that the card is at.\r\n     * @memberof dragableCard\r\n     */\r\n    handPosition = {\r\n      transialtion:{x:0,y:0}, \r\n      angle: 0\r\n    }\r\n    /**\r\n     * Object that holds all data about the card.\r\n     * @type {KevinOnline.CardData}\r\n     * @memberof dragableCard\r\n     */\r\n    cardData: KevinOnline.CardData;\r\n    /**\r\n     * The orginal depth of the card.\r\n     * @type {number}\r\n     * @memberof dragableCard\r\n     */\r\n    ogDepth: number = 0;\r\n    /**\r\n     * Creates an instance of dragableCard.\r\n     * @param {KevinOnline.Params.IDragableCard} {scene, id, canInteract = true, hidden = false}\r\n     * @memberof dragableCard\r\n     */\r\n    constructor({scene, id, canInteract = true, hidden = false}: KevinOnline.Params.IDragableCard){\r\n        super(scene,0,0, !hidden ? (JsonLoader.getInst().data?.cards[id].visual.front_texture as string) : (JsonLoader.getInst().data?.cards[id].visual.back_texture as string));\r\n        this.setInteractive();\r\n        this.cardData = JsonLoader.getInst().data?.cards[id] as KevinOnline.CardData;\r\n        this.setDisplaySize(this.cardData.deck_settings.screen_size.x,this.cardData.deck_settings.screen_size.y);\r\n        \r\n        if(canInteract){\r\n          scene.input.setDraggable(this);\r\n\r\n          this.on(\"pointerover\",()=> {\r\n            this.view()\r\n          });\r\n       \r\n          this.on('pointerout', ()=>{\r\n            this.reset();\r\n          });\r\n          this.on(\"dragstart\",()=>{\r\n            this.reset();\r\n          });\r\n\r\n        }\r\n        scene.add.existing(this);\r\n    \r\n    }\r\n    /**\r\n     * Reset the angle, depth and position of card to orignal hand posistion\r\n     *\r\n     * @memberof dragableCard\r\n     */\r\n    reset(){\r\n      this.setAngle(this.handPosition.angle).setDepth(this.ogDepth).setPosition(this.handPosition.transialtion.x,this.handPosition.transialtion.y);\r\n    }\r\n    /**\r\n     * A zoom effect to view card when in hand\r\n     *\r\n     * @memberof dragableCard\r\n     */\r\n    view(){\r\n      this.ogDepth = this.depth;\r\n      this.setAngle(0).setDepth(5).setPosition(this.handPosition.transialtion.x,this.handPosition.transialtion.y-100);\r\n    }\r\n\r\n}","import EventDispatcher from '../utils/EventDispatcher';\r\nimport QueryableWorker from './OpponentHander';\r\nimport { observe } from \"rxjs-observe\";\r\n\r\nlet instance: any = null;\r\nexport default class GameState{\r\n    static getInstance(): GameState{\r\n        if(instance === null){\r\n          instance = new GameState();\r\n        }\r\n        return instance;\r\n    }\r\n    private emmiter: EventDispatcher = EventDispatcher.getInstance();\r\n    public worker: QueryableWorker = QueryableWorker.getInstance();\r\n    self = observe({health: 30, mana: 2000, turns: 0});\r\n    opponent = observe({health: 30, mana: 1, turns: 0});\r\n    showOverlay = observe({show: false, turnOwner: \"self\"});\r\n    constructor(){\r\n        this.worker.addListeners(\"turn_change\",()=>{\r\n            if(this.OverlayProxy.turnOwner !== \"self\"){\r\n                this.nextTurn();\r\n            }\r\n        });\r\n    }\r\n    get selfProxy(){\r\n        return this.self.proxy;\r\n    }\r\n    get oppoentProxy(){\r\n        return this.opponent.proxy;\r\n    }\r\n    get selfObserve(){\r\n        return this.self.observables;\r\n    }\r\n    get opponentObserve(){\r\n        return this.opponent.observables\r\n    }\r\n    get OverlayProxy(){\r\n        return this.showOverlay.proxy;\r\n    }\r\n    get OverlayObserve(){\r\n        return this.showOverlay.observables;\r\n    }\r\n   \r\n    nextTurn(){\r\n        // make sure to update the oppoent \r\n        if( this.OverlayProxy.turnOwner === \"self\"){\r\n            this.emmiter.emit(\"end_of_turn\",{owner:\"self\"});\r\n            this.emmiter.emit(\"start_of_turn\",{owner:\"opponent\"});\r\n            this.selfProxy.turns++;\r\n            this.OverlayProxy.turnOwner = \"opponent\";\r\n            this.worker.send(\"turn_change\",{ test: \"self\"});\r\n        }else{\r\n            this.emmiter.emit(\"end_of_turn\",{owner:\"opponent\"});\r\n            this.emmiter.emit(\"start_of_turn\",{owner:\"self\"});\r\n            this.oppoentProxy.turns++;\r\n            this.OverlayProxy.turnOwner = \"self\";\r\n            this.worker.send(\"turn_change\",{ test: \"opponent\"});\r\n        }\r\n    }\r\n}","import {GameObjects, Math, Input, Utils} from 'phaser';\r\nimport {CardDeckMannager} from '../../utils/Loader';\r\nimport {JsonLoader} from '@visualsource/vs_api';\r\nimport PhaserHealth from 'phaser-component-health';\r\nimport EventDispatcher from '../../utils/EventDispatcher';\r\nimport GameState from '../../state/GameState';\r\n/**\r\n * Sets up Card Ablites.\r\n * @param {KevinOnline.CardAbilities[]} data\r\n * @param {BoardCard} sprite\r\n */\r\nfunction CreateAblites(data: KevinOnline.CardAbilities[], sprite: BoardCard){\r\n   data.forEach(data=>{\r\n    if(data.trigger !== \"none\"){\r\n        sprite.on(data.trigger,(event: any)=>{\r\n          if(sprite.active && sprite.actionPoints > 0) run(sprite,data, event);\r\n        });\r\n    }\r\n   });\r\n}\r\n/**\r\n * Handles the running of card ablitys.\r\n *\r\n * @param {BoardCard} sprite\r\n * @param {KevinOnline.CardAbilities} data\r\n * @param {*} event\r\n */\r\nfunction run(sprite: BoardCard, data: KevinOnline.CardAbilities, event: any){\r\n   if(data.after_use_state === \"single_use_to_graveyard_before_ability\") sprite.emit(\"single_use_send_to_graveyard_before_ability\");\r\n    const state = GameState.getInstance();\r\n    switch (data.type) {\r\n        case \"draw_card\":{\r\n            // add opponent card draw\r\n            for (let i = 0; i < data.ability_int; i++) {\r\n                switch (data.affecting_player) {\r\n                    case \"opponent\":\r\n                        sprite.GameScene.opponent_hand.drawCard(\"opponent\");\r\n                        break;\r\n                    case \"self\":{\r\n                        sprite.GameScene.player_hand.drawCard(\"self\");\r\n                        break;\r\n                    }\r\n                    case \"self_and_opponent\":{\r\n                        sprite.GameScene.player_hand.drawCard(\"self\");\r\n                        sprite.GameScene.opponent_hand.drawCard(\"opponent\");\r\n                        break;\r\n                    }\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"increase_attack\":{\r\n            sprite.attack += data.ability_int;\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"clone\":{\r\n            sprite.GameScene.spawnCard(data.affecting_player,sprite.cardData.index,sprite.getData(\"dropzone_id\"), data.ability_int);\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"increase_player_health\":{\r\n           if(data.affecting_player === \"self_and_opponent\"){\r\n            state.selfProxy.health += data.ability_int;\r\n            state.oppoentProxy.health += data.ability_int;\r\n           }else{\r\n               state[data.affecting_player].proxy.health += data.ability_int;\r\n           }\r\n           sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"retaliation_damage\":{\r\n            console.log(event);\r\n            // works with \"takes_damage only\"\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"damage_all_cards_on_board\":{\r\n            switch (data.affecting_player) {\r\n                case \"self\":{\r\n                    (sprite.GameScene.player_1_board_c as KevinOnline.Objects.CardGroup).getChildren().forEach((card, i)=>{\r\n                        (card as BoardCard).damageCard(data.ability_int, { id: i , owner: sprite.owner});\r\n                    });\r\n                    break;\r\n                }\r\n                case \"opponent\":{\r\n                    (sprite.GameScene.player_1_board_c as KevinOnline.Objects.CardGroup).getChildren().forEach((card, i)=>{\r\n                        (card as BoardCard).damageCard(data.ability_int, { id: i , owner: sprite.owner});\r\n                    });\r\n                    break;\r\n                }\r\n                case \"self_and_opponent\":{\r\n                    (sprite.GameScene.player_1_board_c as KevinOnline.Objects.CardGroup).getChildren().forEach((card, i)=>{\r\n                        (card as BoardCard).damageCard(data.ability_int, { id: i , owner: sprite.owner});\r\n                    });\r\n                    (sprite.GameScene.player_1_board_c as KevinOnline.Objects.CardGroup).getChildren().forEach((card, i)=>{\r\n                        (card as BoardCard).damageCard(data.ability_int, { id: i , owner: sprite.owner});\r\n                    });\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"spawn_card_from_deck\":{\r\n            sprite.GameScene.spawnCard(data.affecting_player,CardDeckMannager.getInstance().getRandomCard(data.affecting_player),sprite.getData(\"dropzone_id\"), data.ability_int);\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"give_turn_points_to_all_active_cards\":{\r\n            switch (data.affecting_player) {\r\n                case \"self\":{\r\n                    (sprite.GameScene.player_1_board_c as KevinOnline.Objects.CardGroup).getChildren().forEach((card)=>{\r\n                        (card as BoardCard).actionPoints += data.ability_int;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"opponent\":{\r\n                    (sprite.GameScene.player_1_board_c as KevinOnline.Objects.CardGroup).getChildren().forEach((card)=>{\r\n                        (card as BoardCard).actionPoints += data.ability_int;\r\n                    });\r\n                    break;\r\n                }\r\n                case \"self_and_opponent\":{\r\n                    (sprite.GameScene.player_1_board_c as KevinOnline.Objects.CardGroup).getChildren().forEach((card)=>{\r\n                        (card as BoardCard).actionPoints += data.ability_int;\r\n                    });\r\n                    (sprite.GameScene.player_1_board_c as KevinOnline.Objects.CardGroup).getChildren().forEach((card)=>{\r\n                        (card as BoardCard).actionPoints += data.ability_int;\r\n                    });\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"increase_turn_points\":{\r\n           sprite.actionPoints += data.ability_int;\r\n           sprite.actionPoints--;\r\n           break;\r\n        }\r\n        case \"discard_cards_in_hand\":{\r\n            switch (data.affecting_player) {\r\n                case \"self\":\r\n                     sprite.GameScene.player_hand.discardCard(data.ability_int);\r\n                    break;\r\n                 case \"self_and_opponent\":{\r\n                     sprite.GameScene.player_hand.discardCard(data.ability_int);\r\n                     sprite.GameScene.opponent_hand.discardCard(data.ability_int);\r\n                     break;\r\n                 }\r\n                 case \"opponent\":{\r\n                     sprite.GameScene.opponent_hand.discardCard(data.ability_int);\r\n                     break;\r\n                 }\r\n                default:\r\n                    break;\r\n            }\r\n              sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"pickup_first_creature_in_graveyard_to_board\":{\r\n            switch (data.affecting_player) {\r\n                case \"self\":\r\n                    sprite.GameScene.graveyard_a.addCardToBoard(data.affecting_player);\r\n                    break;\r\n                case \"opponent\":\r\n                    sprite.GameScene.graveyard_b.addCardToBoard(data.affecting_player);\r\n                    break;\r\n                case \"self_and_opponent\":\r\n                    sprite.GameScene.graveyard_a.addCardToBoard(\"self\");\r\n                    sprite.GameScene.graveyard_b.addCardToBoard(\"opponent\");\r\n                default:\r\n                    break;\r\n            }\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"pickup_first_creature_in_graveyard_to_hand\":{\r\n            switch (data.affecting_player) {\r\n                case \"self\":\r\n                    sprite.GameScene.graveyard_a.addCardToHand(data.affecting_player);\r\n                    break;\r\n                case \"opponent\":\r\n                    sprite.GameScene.graveyard_b.addCardToHand(data.affecting_player);\r\n                    break;\r\n                case \"self_and_opponent\":\r\n                    sprite.GameScene.graveyard_a.addCardToHand(data.affecting_player);\r\n                    sprite.GameScene.graveyard_b.addCardToHand(data.affecting_player);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"possess_opponents_card\":{\r\n            switch (data.affecting_player) {\r\n                case \"opponent\":{\r\n                    const board = (sprite.GameScene.player_1_board as KevinOnline.Objects.BoardObject);\r\n                    const poss = board.activeSpots()[0];\r\n                    if(poss.id !== undefined){\r\n                        const card = (sprite.GameScene.player_1_board_c as KevinOnline.Objects.CardGroup).getCardByDropZone(poss.id);\r\n                        (sprite.GameScene.player_1_board_c as KevinOnline.Objects.CardGroup).removeCard(card);\r\n                        poss.setData(\"active\",false);\r\n                        sprite.GameScene.spawnCard(sprite.GameScene.ownerInvert(card.owner),card.cardData.index,0);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"self\":{\r\n                    const board = (sprite.GameScene.player_2_board as KevinOnline.Objects.BoardObject);\r\n                    const poss = board.activeSpots()[0];\r\n                    if(poss.id !== undefined){\r\n                        const card = (sprite.GameScene.player_2_board_c as KevinOnline.Objects.CardGroup).getCardByDropZone(poss.id);\r\n                        (sprite.GameScene.player_2_board_c as KevinOnline.Objects.CardGroup).removeCard(card);\r\n                        poss.setData(\"active\",false);\r\n                        sprite.GameScene.spawnCard(sprite.GameScene.ownerInvert(card.owner),card.cardData.index,0);\r\n                    }\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        case \"swap_cards_in_hand\":{\r\n            const scene = sprite.GameScene;\r\n            const oh = scene.opponent_hand.getCardList();\r\n            const uh = scene.player_hand.getCardList();\r\n            scene.player_hand.discardAll();\r\n            scene.opponent_hand.discardAll();\r\n            oh.forEach(value=>{\r\n                scene.player_hand.addCardById(value);\r\n            });\r\n            uh.forEach(value=>{\r\n                scene.opponent_hand.addCardById(value, true, false);\r\n            });\r\n            sprite.actionPoints--;\r\n            break;\r\n        }\r\n        default:\r\n            console.log(\"Not implemented\");\r\n            break;\r\n    }\r\n    if(data.after_use_state === \"single_use_to_graveyard_after_ability\") sprite.emit(\"single_use_send_to_graveyard_after_ability\");\r\n}\r\nexport default class BoardCard extends GameObjects.Sprite implements KevinOnline.Objects.BoardCard{\r\n    cardData: KevinOnline.CardData;\r\n    emmiter: EventDispatcher;\r\n    lifeSpan: number = 0;\r\n    owner: KevinOnline.Owner;\r\n    attack: number;\r\n    actionPoints: number = 1;\r\n    graveyard: KevinOnline.IPosistion;\r\n    statusEffects: any[] = [];\r\n    constructor({scene, posistion,id, graveyard, dropzone_id, owner}: KevinOnline.Params.IBoardCard){\r\n        super(scene,posistion.x,posistion.y,JsonLoader.getInst().data?.cards[id].visual.front_texture as string);\r\n        this.owner = owner ?? \"self\";\r\n        this.cardData = JsonLoader.getInst().data?.cards[id] as KevinOnline.CardData;\r\n        if(this.owner === \"self\") {\r\n            let rope: GameObjects.Rope | null = null;\r\n            let targetSprite: GameObjects.Sprite | null = null;\r\n            let targetObject = { id: -1, owner: null};\r\n            this.setInteractive().scene.input.setDraggable(this,true);\r\n            this.on(\"dragstart\",(pointer: Input.Pointer, x: number, y: number)=>{\r\n                const start = this.getCenter();\r\n                rope = this.scene.add.rope(start.x,start.y,\"shader_stripes\",undefined,[new Math.Vector2(x,y)]).setDepth(2);\r\n                targetSprite = this.scene.add.sprite(0,0,\"\").setVisible(false).setSize(100,100).setDepth(1);\r\n            });\r\n            this.on(\"drag\",(pointer: Input.Pointer)=>{\r\n               Utils.Array.Replace(rope?.points as any,rope?.points[1],new Math.Vector2(pointer.x - this.x,pointer.y - this.y));\r\n               rope?.setDirty();\r\n               if(targetSprite?.visible) targetSprite?.setPosition(pointer.x,pointer.y);\r\n            });\r\n            this.on(\"dragend\",()=>{\r\n                if(targetObject.id !== -1) this.emmiter.emit(\"attacking\", { \r\n                    target_owner: targetObject.owner, \r\n                    target_id: targetObject.id,\r\n                    damage: this.attack, \r\n                    type: this.cardData.attack.damage_type, \r\n                    status_length: this.cardData.attack.status_length,\r\n                    from: {\r\n                        id: this.getData(\"dropzone_id\"),\r\n                        owner: this.owner\r\n                    }\r\n                });\r\n                rope?.destroy(true);\r\n                targetSprite?.destroy(true);\r\n            });\r\n            this.on(\"dragover\",(pointer: Input.Pointer, target: KevinOnline.Objects.DropZone)=>{\r\n                   if(targetObject.id === target.id) return;\r\n                   if(target.getData(\"active\") && this.owner !== target.getData(\"owner\")) {\r\n                       const {can_attack_cards, can_attack_player} = this.cardData.attack;\r\n                       if(can_attack_cards && can_attack_player){\r\n                            targetObject = { id: target.id, owner: target.getData(\"owner\")};\r\n                       }else if(can_attack_cards && (target.id >= 0 && target.id <= 5)){ // check if it is a card zone\r\n                        targetObject = { id: target.id, owner: target.getData(\"owner\")};\r\n                       }else if(can_attack_player && target.id === 6){\r\n                           targetObject = { id: target.id, owner: target.getData(\"owner\")};\r\n                       }\r\n                   } else targetObject = { id: -4 , owner: null};\r\n                   \r\n            });\r\n            this.on(\"dragenter\",()=>{\r\n                if(!targetSprite?.visible){\r\n                    targetSprite?.setVisible(true);\r\n                }\r\n               \r\n            });\r\n            this.on(\"dragleave\",()=>{\r\n                if(targetSprite?.visible){\r\n                    targetSprite?.setVisible(false);\r\n                }\r\n            })\r\n        }\r\n        CreateAblites(this.cardData.abilities,this);\r\n        this.attack = this.cardData.attack.damage;\r\n        this.graveyard = graveyard;\r\n        this.emmiter = EventDispatcher.getInstance();\r\n        this.setData(\"dropzone_id\",dropzone_id).setDisplaySize(this.cardData.deck_settings.screen_size.x,this.cardData.deck_settings.screen_size.y);\r\n        PhaserHealth.AddTo(this, this.cardData.health.health, this.cardData.health.health);\r\n        scene.add.existing(this);\r\n        this.init();\r\n        this.on(\"single_use_send_to_graveyard_before_ability\",()=>this.toGraveyard());\r\n        this.on(\"single_use_send_to_graveyard_after_ability\",()=>this.toGraveyard());\r\n        this.on(\"die\",()=>this.toGraveyard());\r\n        this.emmiter.on(\"start_of_turn\",(data: any)=>{\r\n            if(data.owner === this.owner){\r\n                this.emit(\"start_of_turn\");//emit for ablity\r\n                if(this.cardData.health.life_expectancy !== 0){\r\n                    if(this.cardData.health.life_expectancy <= this.lifeSpan){\r\n                        this.kill();\r\n                        this.emit(\"death_by_life_expectancy\");\r\n                    }else{\r\n                        this.lifeSpan++;\r\n                    }\r\n                }\r\n\r\n                this.statusEffects.forEach(value=>{\r\n                        value();\r\n                });\r\n\r\n            }\r\n        });\r\n        this.emmiter.on(\"end_of_turn\",(data:any)=>{\r\n            if(data.owner === this.owner)this.emit(\"end_of_turn\");//emit for ablity\r\n        });\r\n        this.emmiter.on(\"attacking\",(data: KevinOnline.Events.Attacking)=>{\r\n           if(data.target_id === this.getData(\"dropzone_id\") && this.owner === data.target_owner){\r\n                  this.damageCard(data.damage,data.from);\r\n                  if(data.type === \"poison\"){\r\n                      this.statusEffects.push(()=>{\r\n                          console.log(\"Status Effect\");\r\n                      });\r\n                  }\r\n           }\r\n        });\r\n      \r\n    }\r\n    /**\r\n     * Card init. \r\n     * Plays entry cue/particle \r\n     * @emits on_drop\r\n     * @memberof BoardCard\r\n     */\r\n    init(){\r\n        //emit for ablity\r\n        if(this.cardData.placement_settings.sound_cue_entry !== \"\"){\r\n            this.scene.sound.play(this.cardData.placement_settings.sound_cue_entry);\r\n        }\r\n        if(this.cardData.placement_settings.entry_particle !== \"\"){}\r\n        setTimeout(()=>{\r\n            this.emit(\"on_drop\");\r\n        },1);\r\n    }\r\n    /**\r\n     * Apply damge to the card. \r\n     * @emits takes_damage\r\n     * @param {number} damage\r\n     * @param {number} index\r\n     * @param {KevinOnline.Owner} owner\r\n     * @memberof BoardCard\r\n     */\r\n    damageCard(damage: number, from: KevinOnline.Events.Attacking[\"from\"]){\r\n        this.damage(damage);\r\n        this.emit(\"takes_damage\", from);//emit for ablity\r\n    }\r\n    /**\r\n     * Allow access to the game scene from out side sprite\r\n     * @readonly\r\n     * @memberof BoardCard\r\n     */\r\n    get GameScene(){\r\n        return this.scene as KevinOnline.Objects.MainGameScene;\r\n    }\r\n    /**\r\n     * Moves the card to is defined graveyard\r\n     * @memberof BoardCard\r\n     */\r\n    toGraveyard(){\r\n        this.emit(\"sent_to_graveyard\");//emit for ablity\r\n        if(this.cardData.health.sound_cue_death !== \"\")this.scene.sound.play(this.cardData.health.sound_cue_death);\r\n        if(this.cardData.health.death_particle !== \"\"){}\r\n        this.setActive(false);\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            x: { from: this.x, to: this.graveyard.x},\r\n            y: { from: this.y, to: this.graveyard.y},\r\n            duration: 100,\r\n            onComplete:()=>this.destroy()\r\n            \r\n        });\r\n        if(this.owner === \"self\"){\r\n            (this.scene as KevinOnline.Objects.MainGameScene).graveyard_a.addCard(this.cardData.index, this.getData(\"dropzone_id\"),this.owner);\r\n        }else{\r\n            (this.scene as KevinOnline.Objects.MainGameScene).graveyard_b.addCard(this.cardData.index, this.getData(\"dropzone_id\"),this.owner);\r\n        }\r\n    }\r\n    \r\n\r\n}","import {GameObjects} from 'phaser';\r\nimport BoardCard from './boardCard';\r\n\r\nexport default class CardGroup extends GameObjects.Group implements KevinOnline.Objects.CardGroup{\r\n    constructor({scene}: KevinOnline.Params.ICardGroup){\r\n        super(scene);\r\n        this.scene.add.existing(this);\r\n    }\r\n    addCard(dropzone: KevinOnline.Objects.DropZone, index: number, setActive: boolean = true): BoardCard{\r\n            const card = new BoardCard({\r\n                scene: this.scene,\r\n                posistion: {\r\n                    x: dropzone.x,\r\n                    y: dropzone.y\r\n                },\r\n                id: index,\r\n                graveyard: dropzone.graveyard,\r\n                dropzone_id: dropzone.id,\r\n                owner: dropzone.getData(\"owner\")\r\n            });\r\n            this.add(card);\r\n            if(setActive) dropzone.setData(\"active\", true);\r\n            return card;\r\n    }\r\n    getCardByDropZone(id: number): BoardCard{\r\n        return this.getChildren().find((value=>value.getData(\"dropzone_id\") === id)) as BoardCard;\r\n    }\r\n    removeCard(card: BoardCard){\r\n        if(card.owner === \"self\"){\r\n            const zone = ((this.scene as KevinOnline.Objects.MainGameScene).player_1_board as KevinOnline.Objects.BoardObject).getSlot(card.getData(\"dropzone_id\")) as KevinOnline.Objects.DropZone;\r\n            zone.setData(\"active\",false);\r\n        }else{\r\n            const zone = ((this.scene as KevinOnline.Objects.MainGameScene).player_2_board as KevinOnline.Objects.BoardObject).getSlot(card.getData(\"dropzone_id\")) as KevinOnline.Objects.DropZone;\r\n            zone.setData(\"active\",false);\r\n        }\r\n        this.remove(card, true, true);\r\n\r\n    }\r\n}","import {GameObjects, Scene} from 'phaser';\r\nimport {JsonLoader} from '@visualsource/vs_api';\r\nexport default class Graveyard extends GameObjects.Group{\r\n    cardList: number[] = [];\r\n    graveyard_location: KevinOnline.IPosistion = {x:0,y:0};\r\n    constructor(scene: Scene, graveyard: KevinOnline.IPosistion){\r\n        super(scene);\r\n        this.graveyard_location = graveyard;\r\n        this.scene.add.existing(this);\r\n    }\r\n    /**\r\n     * Adds a new card to the graveyard, set new card as visual\r\n     *\r\n     * @param {number} index card index\r\n     * @param {number} dz_id dropzone id\r\n     * @param {KevinOnline.Owner} owner\r\n     * @memberof Graveyard\r\n     */\r\n    addCard(index: number, dz_id: number, owner: KevinOnline.Owner): this{\r\n        this.getChildren()[0]?.destroy();\r\n        const data = JsonLoader.getInst().data?.cards[index] as KevinOnline.CardData;\r\n        const visual = this.scene.add.sprite(this.graveyard_location.x,this.graveyard_location.y,data.visual.front_texture);\r\n        visual.setDisplaySize(data.deck_settings.screen_size.x,data.deck_settings.screen_size.y);\r\n        this.add(visual);\r\n        if(owner === \"self\"){\r\n           const dz = (this.scene as KevinOnline.Objects.MainGameScene).player_1_board.getSlot(dz_id);\r\n           (dz as KevinOnline.Objects.DropZone).setData(\"active\",false);\r\n        }else{\r\n            const dz = (this.scene as KevinOnline.Objects.MainGameScene).player_2_board.getSlot(dz_id);\r\n            (dz as KevinOnline.Objects.DropZone).setData(\"active\",false);\r\n        }\r\n        this.cardList.push(index);\r\n        return this;\r\n    }\r\n    getTopCard(): number{\r\n        const card = this.cardList[0];\r\n        this.cardList = this.cardList.slice(0,0);\r\n        return card; \r\n    }\r\n    addCardToBoard(owner: KevinOnline.Owner){\r\n        if(owner === \"self\"){\r\n            (this.scene as KevinOnline.Objects.MainGameScene).spawnCard(\"self\", this.getTopCard(),3);\r\n        }else{\r\n            (this.scene as KevinOnline.Objects.MainGameScene).spawnCard(\"opponent\", this.getTopCard(),3);\r\n        }\r\n    }\r\n    addCardToHand(owner: KevinOnline.Owner){\r\n        if(owner === \"self\"){\r\n            (this.scene as KevinOnline.Objects.MainGameScene).player_hand.addCardById(this.getTopCard());\r\n        }else{\r\n            (this.scene as KevinOnline.Objects.MainGameScene).opponent_hand.addCardById(this.getTopCard());\r\n        }\r\n    }\r\n\r\n}","import {GameObjects} from 'phaser';\r\nimport dragableCard from './cards/dragableCard';\r\nimport {clamp,lerp,select} from '../utils/Math';\r\nimport {CardDeckMannager} from '../utils/Loader';\r\n/**\r\n * Class for handling the player hand\r\n *\r\n * @export\r\n * @class Hand\r\n * @extends {GameObjects.Group}\r\n * @implements {KevinOnline.Objects.Hand}\r\n */\r\nexport default class Hand extends GameObjects.Group implements KevinOnline.Objects.Hand {\r\n    public cards_in_hand: number = 0;\r\n    public max_cards_in_hand: number = 30;\r\n    public fly_in_direction: boolean = true;\r\n    public rotate_cards_to_offset: boolean = true;\r\n    public card_offset: number = 0;\r\n    public rotation_distance_scale_factor: number = 0.15;\r\n    public radius_offset: number = -0.05;\r\n    public card_spacing: number = 250;\r\n    public dynamic_spacing: boolean = true;\r\n    public dynamic_spacing_max_offset: number = 100;\r\n    public screenOffestX: number = window.innerWidth/2;\r\n    public screenOffestY: number = -window.innerHeight+100;\r\n    public card_scale: number = 1;\r\n    /**\r\n     * Creates an instance of Hand.\r\n     * @param {KevinOnline.Params.IHandGroup} {scene, children, config}\r\n     * @memberof Hand\r\n     */\r\n    constructor({scene, children, config}: KevinOnline.Params.IHandGroup){\r\n        super(scene, children);\r\n        this.cards_in_hand = config?.cards_in_hand ?? 0;\r\n        this.max_cards_in_hand = config?.max_cards_in_hand ?? 30;\r\n        this.fly_in_direction = config?.fly_in_direction ?? true;\r\n        this.rotate_cards_to_offset = config?.rotate_cards_to_offset ?? true;\r\n        this.card_offset = config?.card_offset ?? 0;\r\n        this.rotation_distance_scale_factor = config?.rotation_distance_scale_factor ?? 0.15;\r\n        this.radius_offset = config?.radius_offset ?? -0.05;\r\n        this.card_spacing = config?.card_spacing ?? 250;\r\n        this.dynamic_spacing = config?.dynamic_spacing ?? true;\r\n        this.dynamic_spacing_max_offset = config?.dynamic_spacing_max_offset ?? 100;\r\n        this.screenOffestX = config?.screenOffestX ?? (window.innerWidth/2);\r\n        this.screenOffestY = config?.screenOffestY ?? (-window.innerHeight+80);\r\n        this.card_scale = config?.card_scale ?? 1;\r\n        scene.add.existing(this);\r\n        this.init();\r\n    }\r\n    /**\r\n     * calcs the angle and position for a card\r\n     *\r\n     * @private\r\n     * @param {number} [card_loop_index=0]\r\n     * @returns\r\n     * @memberof Hand\r\n     */\r\n    private getCardPosistion(card_loop_index: number = 0){\r\n        const a = this.cards_in_hand/this.max_cards_in_hand;\r\n        const b = lerp(this.dynamic_spacing_max_offset,this.card_spacing,a);\r\n        const c = clamp(this.card_spacing,this.dynamic_spacing_max_offset,b);\r\n        const d = select(this.card_spacing,c,this.dynamic_spacing);\r\n        const e = (this.cards_in_hand-1)/2.0;\r\n        const f = e + this.card_offset; //a\r\n        const g = card_loop_index - f;\r\n        const h = g * d;\r\n        const i = h * this.radius_offset;\r\n        const j = i * g;\r\n        const k = (j*-1.0) - this.screenOffestY;\r\n        const l = k * this.card_scale;\r\n        const o = select((h*-1.0),h,this.fly_in_direction);\r\n        const n =  this.screenOffestX + (o * this.card_scale);\r\n        const m = g * (20.0 * this.rotation_distance_scale_factor);\r\n        const p = m * -1.0;\r\n        const q = select(0.0,select(select(m,p,this.fly_in_direction),select(m,p,this.fly_in_direction),card_loop_index >= f),this.rotate_cards_to_offset) * -1.0;\r\n        return {transialtion:{y: l, x: n}, angle: q}\r\n    }\r\n    /**\r\n     * Calcs the angles and position for every card in hand\r\n     *\r\n     * @private\r\n     * @memberof Hand\r\n     */\r\n    private calcCardPosistion(){\r\n        this.children.entries.forEach((data,i: number)=>{\r\n            const ps = this.getCardPosistion(i);\r\n            (data as KevinOnline.Objects.DragableCard).x = ps.transialtion.x;\r\n            (data as KevinOnline.Objects.DragableCard).y = ps.transialtion.y;\r\n            (data as KevinOnline.Objects.DragableCard).setAngle(ps.angle);\r\n            (data as KevinOnline.Objects.DragableCard).handPosition = ps;\r\n            (data as KevinOnline.Objects.DragableCard).setDepth(ps.angle);\r\n        });\r\n    }\r\n    /**\r\n     * Sets the current cards in hand and calcs angle, and position for cards in hand\r\n     *\r\n     * @memberof Hand\r\n     */\r\n    init(){\r\n        this.cards_in_hand = this.children.entries.length;\r\n        this.calcCardPosistion();\r\n    }\r\n    /**\r\n     * Add a card to hand and updates hand to display the change\r\n     *\r\n     * @param {KevinOnline.Objects.DragableCard} card\r\n     * @returns {this}\r\n     * @memberof Hand\r\n     */\r\n    public addCard(card: KevinOnline.Objects.DragableCard): this{\r\n        this.add(card);\r\n        this.init();\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes a card and updates hand to display change\r\n     *\r\n     * @param {KevinOnline.Objects.DragableCard} card\r\n     * @returns {this}\r\n     * @memberof Hand\r\n     */\r\n    public removeCard(card: KevinOnline.Objects.DragableCard): this{\r\n        this.remove(card, true, true);\r\n        this.init();\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns all current cards in hand as their index type.\r\n     *\r\n     * @returns {number[]}\r\n     * @memberof Hand\r\n     */\r\n    public getCardList(): number[]{\r\n        const cards = this.getChildren();\r\n        return cards.map((card)=>{\r\n            return (card as KevinOnline.Objects.DragableCard).cardData.index;\r\n        });\r\n    \r\n    }\r\n    /**\r\n     * Add a new random card from deck to the hand and updates to display change\r\n     *\r\n     * @param {KevinOnline.Owner} owner\r\n     * @returns {this}\r\n     * @memberof Hand\r\n     */\r\n    public drawCard(owner: KevinOnline.Owner): this{\r\n        const card = new dragableCard({scene: this.scene, id:CardDeckMannager.getInstance().getRandomCard(owner)});\r\n        this.addCard(card); \r\n        return this;\r\n    }\r\n    /**\r\n     * Similer to \"addCard\" but card is added by spesifing a card id\r\n     *\r\n     * @param {number} id\r\n     * @param {boolean} [hidden=false]\r\n     * @param {boolean} [canInteract=true]\r\n     * @returns {this}\r\n     * @memberof Hand\r\n     */\r\n    public addCardById(id: number, hidden: boolean = false, canInteract: boolean = true): this{\r\n        this.addCard(new dragableCard({scene: this.scene, id, canInteract, hidden})); \r\n        return this;\r\n    }\r\n    /**\r\n     * Discard a amount of cards from hand \r\n     *\r\n     * @param {number} [amount=1]\r\n     * @returns {this}\r\n     * @memberof Hand\r\n     */\r\n    public discardCard(amount: number = 1): this{\r\n        const cards = this.getChildren();\r\n        if(amount > cards.length) return this;\r\n        for (let i = 0; i <= amount; i++) {\r\n            this.remove(cards[i], true, true);\r\n        }\r\n        this.init();\r\n        return this;\r\n    }\r\n    /**\r\n     * Discards all cards in the hand\r\n     *\r\n     * @returns {this}\r\n     * @memberof Hand\r\n     */\r\n    public discardAll(): this{\r\n        this.clear(true,true);\r\n        this.init();\r\n        return this;\r\n    }\r\n}\r\n\r\n","import {GameObjects} from 'phaser';\r\nimport EventDispatcher from '../utils/EventDispatcher';\r\nexport default class DropZone extends GameObjects.Zone implements KevinOnline.Objects.DropZone{\r\n    emiter = EventDispatcher.getInstance();\r\n    id: number;\r\n    graveyard: KevinOnline.IPosistion;\r\n    constructor({scene, posistion, owner, id, graveyard}:KevinOnline.Params.IDropZone){\r\n        super(scene,posistion.x,posistion.y, 200,280);\r\n        this.graveyard = graveyard;\r\n        this.id = id;\r\n        this.setRectangleDropZone(200,280);\r\n        this.setData(\"owner\",owner);\r\n        this.setData(\"active\",false);\r\n        scene.add.existing(this);\r\n        scene.input.enableDebug(this);\r\n    }\r\n}","import {GameObjects} from 'phaser';\r\nimport DropZone from './DropZone';\r\n/**\r\n * Class for handling the dropzones and deletion and creation of cards on board\r\n *\r\n * @export\r\n * @class BoardObject\r\n * @extends {GameObjects.Group}\r\n */\r\nexport default class BoardObject extends GameObjects.Group implements KevinOnline.Objects.BoardObject {\r\n    /**\r\n     * The owner of the card\r\n     * @type {KevinOnline.Owner}\r\n     * @memberof BoardObject\r\n     */\r\n    owner: KevinOnline.Owner;\r\n    /**\r\n     * Object holding where the graveyard should be.\r\n     * @type {KevinOnline.IPosistion}\r\n     * @memberof BoardObject\r\n     */\r\n    graveyard: KevinOnline.IPosistion\r\n    /**\r\n     *Creates an instance of BoardObject.\r\n     * @param {KevinOnline.Params.IBoard} {scene, owner, start, spacing, graveyard}\r\n     * @memberof BoardObject\r\n     */\r\n    constructor({scene, owner, start, spacing, graveyard}:KevinOnline.Params.IBoard){\r\n        super(scene);\r\n        this.owner = owner;\r\n        this.graveyard = graveyard\r\n        const items: DropZone[] = [];\r\n        for(let i = 0; i<6; i++){\r\n            items.push(new DropZone({ \r\n                scene,\r\n                posistion: {x: start.x + spacing, y: start.y},\r\n                owner,\r\n                id: i,\r\n                graveyard\r\n             }));\r\n             start.x += spacing;\r\n        }\r\n        this.addMultiple(items);\r\n        this.scene.add.existing(this);\r\n    }\r\n    /**\r\n     * Returns all unactive dropzones.\r\n     *\r\n     * @returns {DropZone[]}\r\n     * @memberof BoardObject\r\n     */\r\n    unactiveSpots(): DropZone[]{\r\n        return this.getChildren().filter(data=>data.getData(\"active\") === false) as DropZone[];\r\n    }\r\n    /**\r\n     * Returns all active dropzones.\r\n     *\r\n     * @returns {DropZone[]}\r\n     * @memberof BoardObject\r\n     */\r\n    activeSpots(): DropZone[]{\r\n        return this.getChildren().filter(data=>data.getData(\"active\") === true) as DropZone[];\r\n    }\r\n    /**\r\n     * Gets the dropzone with the the given id.\r\n     *\r\n     * @param {number} id\r\n     * @returns {DropZone}\r\n     * @memberof BoardObject\r\n     */\r\n    getSlot(id: number): DropZone{\r\n        return this.getChildren().find(dat=>(dat as DropZone).id === id) as DropZone;\r\n    }\r\n    /**\r\n     * Spawn a card a given dropzone and a set number of cards to create. \r\n     *  Good for duplcating cards\r\n     *\r\n     * @param {{card_id: number,zone_id:number,amount:number}} {card_id, zone_id, amount = 1}\r\n     * @memberof BoardObject\r\n     */\r\n    spawn({card_id, zone_id, amount = 1}:{card_id: number,zone_id:number,amount:number}): this{\r\n        const slots = this.getChildren();\r\n        let check = 1;\r\n        const getAviableSlot = (): DropZone | null => {\r\n            const a = slots[zone_id + check];\r\n            const b = slots[zone_id - check];\r\n            if(a !== undefined && !a.getData(\"active\")){\r\n                a.setData(\"active\",true);\r\n                check = 1;\r\n                return a as DropZone;\r\n            }else if(b !== undefined && !b.getData(\"active\")){\r\n                b.setData(\"active\",true);\r\n                check = 1;\r\n                return b as DropZone;\r\n            }else{\r\n                if(check < slots.length){\r\n                    check++;\r\n                    return getAviableSlot();\r\n                }else{\r\n                    check = 1;\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < amount; i++) {\r\n            const zone = getAviableSlot();\r\n            if(zone !== null){\r\n                const card = (this.scene as KevinOnline.Objects.MainGameScene).newCard(this.owner,zone,card_id, false);\r\n                card.owner = zone.getData(\"owner\");\r\n                card.actionPoints = 0;\r\n            }else{\r\n                console.error(\"No space on board\");\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n   \r\n}\r\n\r\n\r\n","import {Scene} from 'phaser';\r\nimport dragableCard from '../objects/cards/dragableCard';\r\nimport CardGroup from '../objects/cards/CardGroup';\r\nimport Graveyard from '../objects/Graveyard';\r\nimport Hand from '../objects/Hand';\r\nimport BoardObject from '../objects/Board';\r\nimport GameState from '../state/GameState';\r\nimport {CardDeckMannager} from '../utils/Loader';\r\nimport QueryableWorker from '../state/OpponentHander';\r\n\r\nimport SceneWatcherPlugin from 'phaser-plugin-scene-watcher'\r\nimport PhaserGUIAction from 'phaser3_gui_inspector';\r\nexport default class GameScene extends Scene implements KevinOnline.Objects.MainGameScene{\r\n    settings: KevinOnline.Settings = { uuid: \"\", online: false, debug: false}\r\n    gameState = GameState.getInstance();\r\n    cardManager = CardDeckMannager.getInstance();\r\n    worker = QueryableWorker.getInstance();\r\n    player_1_board: any;\r\n    player_2_board: any;\r\n    player_hand: any;\r\n    opponent_hand: any;\r\n    player_1_board_c: any;\r\n    player_2_board_c: any;\r\n    graveyard_a: any;\r\n    graveyard_b: any;\r\n    constructor(){\r\n        super(\"main\");\r\n    }\r\n    init(data: any){\r\n        this.settings.uuid = data.settings.uuid;\r\n        this.settings.online = data.settings.online as any === \"true\" ? true : false;\r\n        if(this.settings.debug){\r\n            this.plugins.install(\"SceneWatcher\",SceneWatcherPlugin, true);\r\n            PhaserGUIAction(this);\r\n        }\r\n    }\r\n    preload(){\r\n        this.gameState.OverlayProxy.show = true;\r\n    }\r\n    create(){\r\n        this.add.shader(\"Stripes\",0,0,50,50).setRenderToTexture(\"shader_stripes\");\r\n        this.graveyard_a = new Graveyard(this,{\r\n            x: 300 + 1400,\r\n            y: 600\r\n        } );\r\n        this.graveyard_b = new Graveyard(this,{\r\n            x: 0,\r\n            y: 300\r\n        });\r\n        this.opponent_hand = new Hand({\r\n            scene: this,\r\n            config: {\r\n                card_scale: 1,\r\n                rotation_distance_scale_factor: -0.15,\r\n                radius_offset: 0.05,\r\n                card_spacing: 250,\r\n                screenOffestY: 5\r\n            },\r\n            children: [\r\n                new dragableCard({scene: this, id:0, canInteract: false, hidden: true}),\r\n                new dragableCard({scene: this, id:0, canInteract: false, hidden: true}),\r\n                new dragableCard({scene: this, id:0, canInteract: false, hidden: true}),\r\n                new dragableCard({scene: this, id:0, canInteract: false, hidden: true})\r\n            ]\r\n        });\r\n        this.player_hand = new Hand({\r\n            scene: this, \r\n            children: [\r\n                new dragableCard({scene: this, id: this.cardManager.getRandomCard(\"self\")}),\r\n                new dragableCard({scene: this, id: this.cardManager.getRandomCard(\"self\")}),\r\n                new dragableCard({scene: this, id: this.cardManager.getRandomCard(\"self\")}),\r\n                new dragableCard({scene: this, id: this.cardManager.getRandomCard(\"self\")})\r\n            ]\r\n        });\r\n        this.player_1_board = new BoardObject({ \r\n            scene: this, \r\n            owner: \"self\", \r\n            start: {\r\n                x: 75, \r\n                y: 600\r\n            }, \r\n            spacing: 225,\r\n            graveyard: {\r\n                x: 300 + 1400,\r\n                y: 600\r\n            } \r\n        });\r\n        this.player_1_board_c = new CardGroup({scene: this});\r\n        this.player_2_board = new BoardObject({\r\n            scene: this, \r\n            owner: \"opponent\", \r\n            start: {\r\n                x: 75, \r\n                y: 300\r\n            }, \r\n            spacing: 225,\r\n            graveyard: {\r\n                x: 0,\r\n                y: 300\r\n            }\r\n        });\r\n        this.player_2_board_c = new CardGroup({scene: this});\r\n        this.player_2_board_c.addCard(this.player_2_board.getSlot(0),1);\r\n        this.player_2_board_c.addCard(this.player_2_board.getSlot(5),1);\r\n        this.input.on('drag', function (pointer: any, gameObject: KevinOnline.Objects.DragableCard) {\r\n            if(gameObject instanceof dragableCard){\r\n                gameObject.setAngle(0);\r\n                gameObject.x = pointer.x;\r\n                gameObject.y = pointer.y;\r\n            }\r\n        });\r\n        this.input.on('dragend', function (pointer: any, gameObject:KevinOnline.Objects.DragableCard) {\r\n            if(gameObject instanceof dragableCard){\r\n                gameObject.setPosition(gameObject.handPosition.transialtion.x,gameObject.handPosition.transialtion.y);\r\n                gameObject.setAngle(gameObject.handPosition.angle);\r\n            }\r\n        });\r\n       this.input.on('drop',  (pointer: any, gameObject: KevinOnline.Objects.DragableCard, dropZone: KevinOnline.Objects.DropZone)=>{\r\n           if(gameObject instanceof dragableCard){\r\n            if(gameObject.cardData.placement_settings.mana_cost <= this.gameState.selfProxy.mana && \r\n                !dropZone.getData(\"active\") && \r\n                (dropZone.getData(\"owner\") === gameObject.cardData.placement_settings.owner || gameObject.cardData.placement_settings.owner === \"self_and_opponent\")){\r\n                  this.gameState.selfProxy.mana -= gameObject.cardData.placement_settings.mana_cost;\r\n                  this.newCard(dropZone.getData(\"owner\") as KevinOnline.Owner,dropZone,gameObject.cardData.index)\r\n                  this.player_hand.removeCard(gameObject);\r\n              }\r\n           }\r\n        });\r\n    \r\n    }\r\n    /**\r\n     * Creates a new card at a given dropzone\r\n     *\r\n     * @param {KevinOnline.Owner} owner\r\n     * @param {KevinOnline.Objects.DropZone} dropZone\r\n     * @param {number} card_id\r\n     * @param {boolean} [active=true]\r\n     * @returns {KevinOnline.Objects.BoardCard}\r\n     * @memberof GameScene\r\n     * \r\n     * Used for the ondrop event: ln 96 mainScene.ts\r\n     */\r\n    newCard(owner: KevinOnline.Owner, dropZone: KevinOnline.Objects.DropZone, card_id: number, active: boolean = true): KevinOnline.Objects.BoardCard{\r\n        switch (owner) {\r\n            case \"self\":{\r\n               return (this.player_1_board_c as CardGroup).addCard(dropZone,card_id, active);\r\n            }\r\n            case \"opponent\":{\r\n                return (this.player_2_board_c as CardGroup).addCard(dropZone,card_id, active);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *  Creates a set number of cards from a given dropzone\r\n     *\r\n     * @param {KevinOnline.Owner} owner\r\n     * @param {number} card_id\r\n     * @param {number} zone_id\r\n     * @param {number} [amount=1]\r\n     * @memberof GameScene\r\n     * \r\n     * used from card ablity \r\n     */\r\n    spawnCard(owner: KevinOnline.Owner, card_id:number, zone_id:number, amount: number = 1){\r\n        switch (owner) {\r\n            case \"opponent\":{\r\n                this.player_2_board.spawn({card_id, zone_id, amount});\r\n                break;\r\n            }\r\n            case \"self\":{\r\n                this.player_1_board.spawn({card_id, zone_id, amount});\r\n                break;\r\n            }\r\n            default:\r\n                console.error(\"Owner setting not supported\");\r\n                break;\r\n        }\r\n    }\r\n    ownerInvert(ogOwner: KevinOnline.Owner): KevinOnline.Owner{\r\n        if(ogOwner === \"self\")return \"opponent\";\r\n        return \"self\";\r\n    }\r\n}","import {Types, WEBGL, Game, Scale} from 'phaser';\r\nimport {queryFromURI} from '../utils/history';\r\nimport LoadingScene from './scenes/loadingScene';\r\nimport MainScene from './scenes/mainScene';\r\n//import SceneWatcherPlugin from 'phaser-plugin-scene-watcher';\r\n//i//mport PhaserUpdatePlugin from 'phaser-plugin-update';\r\nfunction createConfig(canvas: HTMLCanvasElement): Types.Core.GameConfig{\r\n    return {\r\n        canvas,\r\n        type: WEBGL,\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        banner: false,\r\n        title: \"Kevin Online\",\r\n        scene: undefined,\r\n        scale: {\r\n            mode: Scale.RESIZE,\r\n            autoCenter: Scale.NO_CENTER\r\n        },\r\n        physics:{\r\n            //@ts-ignore\r\n            default: false\r\n        },\r\n        version: \"0.2.5-alpha\",\r\n        fps:{\r\n            min: 30,\r\n            target: 60\r\n        },\r\n        input: {\r\n            keyboard: true,\r\n            gamepad: false\r\n        },\r\n        plugins:{\r\n            global:[\r\n              //  { key: 'SceneWatcher', plugin: SceneWatcherPlugin, start: true }\r\n            ],\r\n            scene:[\r\n               // { key: 'updatePlugin', plugin: PhaserUpdatePlugin, mapping: 'updates'},\r\n            ]\r\n        }\r\n    \r\n    }\r\n}\r\n\r\nclass KevinOnline extends Game{\r\n    settings: {uuid: string, online: boolean} = queryFromURI();\r\n    constructor(config: Types.Core.GameConfig){\r\n        super(config);\r\n        this.scene.add(\"loading\",LoadingScene, true,{settings: this.settings});\r\n        this.scene.add(\"main\",MainScene, false,{settings: this.settings});\r\n    }\r\n}\r\nexport function init(canvas: HTMLCanvasElement){\r\n        const game = new KevinOnline(createConfig(canvas));\r\n}","import React,{Component, createRef, useState, useEffect} from 'react';\r\nimport {init} from './main';\r\nimport {Button} from 'shineout';\r\nimport GameState from './state/GameState';\r\nimport OpponentHander from './state/OpponentHander';\r\n\r\nexport default class Game extends Component<{},{overlay: boolean,buttonDisable:boolean}>{\r\n    public gameElement = createRef<HTMLCanvasElement>();\r\n    gameState = GameState.getInstance();\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            overlay: false,\r\n            buttonDisable: false\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.gameState.OverlayObserve.show.subscribe((value: any)=>this.setState({overlay: value}));\r\n        this.gameState.OverlayObserve.turnOwner.subscribe((value: any)=>{\r\n             this.setState({buttonDisable: (value === \"self\" ? false : true)});\r\n        });\r\n        init(this.gameElement.current as HTMLCanvasElement);\r\n    }\r\n    componentWillUnmount(){\r\n        OpponentHander.getInstance().terminate();\r\n    }\r\n    render(){\r\n            return <div>\r\n                        {this.Overlay()}\r\n                        <canvas id=\"game\" ref={this.gameElement}></canvas>\r\n                </div>\r\n    }\r\n    Overlay(){\r\n        if(this.state.overlay){\r\n            return <>\r\n                 <div id=\"game-overlay\">\r\n                    <Button type=\"secondary\">Menu</Button>\r\n                </div>\r\n                <div id=\"turn_time\">\r\n                    <p>{\"0.00\"}</p>\r\n                    <Button type=\"primary\" disabled={this.state.buttonDisable} onClick={()=>this.gameState.nextTurn()}>wating</Button>\r\n                </div>\r\n                <PlayerStats owner={this.gameState.selfProxy} observe={this.gameState.selfObserve} css=\"player-self\"/>\r\n                <PlayerStats owner={this.gameState.oppoentProxy} observe={this.gameState.opponentObserve} css=\"player-opponent \"/>\r\n            </>\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction PlayerStats({owner, observe, css}:{owner: any, observe: any, css: string}){\r\n    const [mana, setMana] = useState(owner.mana);\r\n    const [health, setHealth] = useState(owner.health);\r\n    const [turns, setTurns] = useState(owner.turns);\r\n    useEffect(()=>{\r\n        observe.health.subscribe((data: number)=>setHealth(data));\r\n        observe.mana.subscribe((data: number)=>setMana(data));\r\n        observe.turns.subscribe((data: number)=>setTurns(data));\r\n    },[observe.health,observe.mana,observe.turns]);\r\n    return <div id=\"player-info\" className={css}>\r\n            <p>Mana: {mana}</p>\r\n            <p>Health: {health}</p>\r\n            <p>Turns: {turns}</p>\r\n            <img src=\"\" alt=\"user_logo\"/>\r\n          </div>\r\n}\r\n","\r\nimport React,{ useState } from 'react';\r\nimport {Button,Input, Message, Modal, Card} from 'shineout';\r\nimport {routeTo} from '../../utils/history';\r\nexport default function PlayHome(){\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [code, setCode] = useState();\r\n    const Footer = ()=>{\r\n        return <div>\r\n            <Button onClick={()=>routeTo(\"/play/multiplayer\",{ query: {create: \"TRUE\"}})}>Start a Game</Button>\r\n            <Button onClick={()=>{\r\n                if(code){\r\n                    routeTo(\"/play/multiplayer\",{query:{uuid:code}})\r\n                }else{\r\n                    //@ts-ignore\r\n                    Message.error('You need a code to join a game!',5,{\r\n                        position: \"bottom-right\",\r\n                        title: \"Join Error\"\r\n                    });\r\n                }\r\n            }}>Join Game</Button>\r\n        </div>\r\n    }\r\n    return <div id=\"play-home\">\r\n            <Card className=\"select-play\">\r\n                <Card.Body className=\"select-art\">\r\n\r\n                </Card.Body>\r\n                <Card.Footer className=\"select-button\">\r\n                    <Button type=\"link\" onClick={()=>routeTo(\"/play/singleplayer\",{})}>Singleplayer</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n            <Card className=\"select-play\">\r\n                <Card.Body className=\"select-art\">\r\n\r\n                </Card.Body>\r\n                <Card.Footer className=\"select-button\">\r\n                    <Button type=\"link\" onClick={()=>setShowModal(true)}>Multiplayer</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n                <Modal visible={showModal} onClose={()=>setShowModal(false)} title=\"Start Multiplayer\" footer={Footer()}>\r\n                    <Input onChange={(value: any)=>{setCode(value)}} placeholder=\"enter a join code\"></Input>\r\n                </Modal>\r\n           </div>;\r\n}","import React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport createAuth0Client, {Auth0Client} from \"@auth0/auth0-spa-js\";\r\n\r\nconst DEFAULT_REDIRECT_CALLBACK = (event:any) => window.history.replaceState({}, document.title, window.location.pathname);\r\n//@ts-ignore\r\nexport const Auth0Context = createContext();\r\nexport const useAuth0 = () => useContext(Auth0Context);\r\nexport const Auth0Provider = ({\r\n    //@ts-ignore\r\n    children,\r\n    onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\r\n    ...initOptions\r\n  }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [user, setUser] = useState({});\r\n    const [auth0Client, setAuth0] = useState<Auth0Client>();\r\n    const [loading, setLoading] = useState(true);\r\n    const [popupOpen, setPopupOpen] = useState(false);\r\n  \r\n    useEffect(() => {\r\n      const initAuth0 = async () => {        \r\n        try {\r\n            //@ts-ignore\r\n          const auth0FromHook = await createAuth0Client(initOptions);\r\n          setAuth0(auth0FromHook);\r\n    \r\n          if (window.location.search.includes(\"code=\") &&\r\n              window.location.search.includes(\"state=\")) {\r\n            const { appState } = await auth0FromHook.handleRedirectCallback();\r\n            //@ts-ignore\r\n            onRedirectCallback(appState);\r\n          }\r\n    \r\n          const isAuthenticated = await auth0FromHook.isAuthenticated();\r\n          setIsAuthenticated(isAuthenticated);\r\n    \r\n          if (isAuthenticated) {\r\n            const user = await auth0FromHook.getUser();\r\n            setUser(user);\r\n          }\r\n    \r\n          setLoading(false);\r\n        } catch (error) {\r\n          setLoading(false);\r\n          console.log(error);\r\n        }\r\n      };\r\n      initAuth0();\r\n    }, []);\r\n\r\n    const loginWithPopup = async (params = {}) => {\r\n      setPopupOpen(true);\r\n      try {\r\n          //@ts-ignore\r\n        await auth0Client.loginWithPopup(params);\r\n      } catch (error) {\r\n        console.error(error);\r\n      } finally {\r\n        setPopupOpen(false);\r\n      }\r\n      //@ts-ignore\r\n      const user = await auth0Client.getUser();\r\n      setUser(user);\r\n      //@ts-ignore\r\n      setIsAuthenticated(true);\r\n    };\r\n  \r\n    const handleRedirectCallback = async () => {\r\n      setLoading(true);\r\n      //@ts-ignore\r\n      await auth0Client.handleRedirectCallback();\r\n      //@ts-ignore\r\n      const user = await auth0Client.getUser();\r\n      setLoading(false);\r\n      //@ts-ignore\r\n      setIsAuthenticated(true);\r\n      setUser(user);\r\n    };\r\n    return (\r\n      <Auth0Context.Provider\r\n        value={{\r\n          isAuthenticated,\r\n          user,\r\n          loading,\r\n          popupOpen,\r\n          loginWithPopup,\r\n          handleRedirectCallback,\r\n          //@ts-ignore\r\n          getIdTokenClaims: (...p: any[]) => auth0Client.getIdTokenClaims(...p),\r\n          //@ts-ignore\r\n          loginWithRedirect: (...p: any[]) => auth0Client.loginWithRedirect(...p),\r\n          //@ts-ignore\r\n          getTokenSilently: (...p: any[]) => auth0Client.getTokenSilently(...p),\r\n          //@ts-ignore\r\n          getTokenWithPopup: (...p: any[]) => auth0Client.getTokenWithPopup(...p),\r\n          //@ts-ignore\r\n          logout: (...p: any[]) => auth0Client.logout(...p)\r\n        }}\r\n      >\r\n        {children}\r\n      </Auth0Context.Provider>\r\n    );\r\n  };","import React,{useEffect, useState, useReducer, useCallback} from 'react';\r\nimport useForceUpdate from 'use-force-update';\r\nimport {Button, Select, Image, Input, Message, Spin} from 'shineout';\r\nimport {routeTo,queryFromURI} from '../../utils/history';\r\nimport {Utils} from 'phaser';\r\nimport QueryableWorker from '../../game/state/OpponentHander';\r\nimport {CardDeckMannager} from \"../../game/utils/Loader\";\r\nimport {useAuth0} from '../AuthProvidor';\r\nimport { useParams} from \"react-router-dom\";\r\n\r\ntype ButtonTypes = \"link\" | \"success\" | \"default\" | \"primary\" | \"secondary\" | \"warning\" | \"danger\" | undefined;\r\nconst cdMannager = CardDeckMannager.getInstance();\r\nlet worker: QueryableWorker | null = null;\r\nfunction userReducer(state: any, action: any){\r\n    switch(action.type){\r\n        case \"logo_name\":{\r\n            state.logo = action.value.logo;\r\n            state.name = action.value.name;\r\n            return state;\r\n        }\r\n        case \"status\":{\r\n            state.status.status = action.value.status;\r\n            state.status.button = action.value.button;\r\n            state.status.text = action.value.text;\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nfunction opponentReducer(state:any,action:any){\r\n    switch(action.type){\r\n        case \"user\":{\r\n            state.logo = action.value.logo;\r\n            state.name = action.value.name;\r\n            state.status = action.value.status;\r\n            return state;\r\n        }\r\n        case \"status\":{\r\n            state.status = action.value.status;\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default function GameSetup(){\r\n    const forceUpdate = useForceUpdate();\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [code, setCode] = useState(\"NO CODE\");\r\n    const [decks, setDecks] = useState<string[]>([]);\r\n    const [host, setHost] = useState<boolean>(false);\r\n    const [userData, dispatchUser] = useReducer(userReducer, {logo:\"\", name:\"USERNAME\", status: {status: \"Wating\", button: \"success\", text: \"Ready\"}});\r\n    const [opponentData, dispatchOpponent] = useReducer(opponentReducer, {logo:\"\", name:\"USERNAME\", status: \"Wating\"});\r\n    const [mode, setMode] = useState<string>();\r\n    //@ts-ignore\r\n    const {loading, isAuthenticated,user} = useAuth0();\r\n    const {type} = useParams();\r\n    const canStart = useCallback(()=>{\r\n        if(userData.status.status === \"Ready\" && opponentData.status === \"Ready\") return false;\r\n        return true;\r\n    },[opponentData.status,userData.status.status])\r\n    useEffect(()=>{\r\n        const init = (online: string)=>{\r\n            setMode(online);\r\n            setDecks(cdMannager.getDecks());\r\n            setIsLoading(false);\r\n            const query = queryFromURI();\r\n            worker = QueryableWorker.create(type);\r\n            cdMannager.init();\r\n            worker.addListeners(\"websocket_ready\",(event: any)=>{\r\n                if(query?.create === \"TRUE\"){ \r\n                    setHost(true);\r\n                    worker?.send(\"new_game\",{});\r\n                };\r\n                if(query?.uuid) worker?.send(\"join_game\",{ uuid: query?.uuid});\r\n                \r\n            });\r\n            worker.addListeners(\"init\",(event: any)=>{\r\n                dispatchOpponent({type:\"user\", value: {name: event.name, status: event.status, logo: event.logo}});\r\n                forceUpdate();\r\n            });\r\n            worker.addListeners(\"status_opponent\",(event: any)=>{\r\n                dispatchOpponent({type:\"status\", value:{status: event}});\r\n                forceUpdate();\r\n                //checkCanStart();\r\n            });\r\n            worker.addListeners(\"join_code\",(event: any)=>{\r\n                setCode(event.uuid);\r\n                worker?.send(\"init\",{ name: userData.name, status: userData.status.status, logo: userData.logo});\r\n            });\r\n            worker.addListeners(\"game_start\",(event: any)=>{\r\n                routeTo(\"/game\",{query:{uuid: code, online: true}, replace: true});\r\n            });\r\n            worker.addListeners(\"kick\",(event: any)=>{\r\n                worker?.terminate();\r\n                //@ts-ignore\r\n                Message.info('You Where kicked',5,{\r\n                    position: \"bottom-right\",\r\n                    title: \"Kicked\"\r\n                });\r\n                \r\n                routeTo(\"/play\",{replace: true});\r\n            });\r\n            forceUpdate();\r\n            \r\n        }\r\n        if(!loading){\r\n            if(isAuthenticated && type === \"multiplayer\"){\r\n                dispatchUser({type:\"logo_name\", value:{logo: user?.picture ?? \"\", name: user?.name ?? \"USERNAME\"}});\r\n                setHost(false);\r\n                init(\"multiplayer\");\r\n            }else if(type === \"singleplayer\"){\r\n                dispatchUser({type:\"logo_name\", value:{logo: user?.picture ?? \"\", name: user?.name ?? \"USERNAME\"}});\r\n                setHost(true);\r\n                init(\"singleplayer\");\r\n            }else{\r\n                //@ts-ignore\r\n                Message.error('Failed to Authenticate',5,{\r\n                    position: \"bottom-right\",\r\n                    title: \"Authentication Error\"\r\n                });\r\n                routeTo(\"/play\",{replace: true});\r\n            }\r\n        }\r\n    },[loading]);\r\n\r\n    if(isLoading){\r\n        return <div id=\"playing\">\r\n            <Spin size={50} name=\"cube-grid\"></Spin>\r\n        </div>\r\n    }\r\n\r\n     return <div id=\"playing\">\r\n                <nav id=\"play-nav\">\r\n                    <Select noCache={true} onChange={(value)=>{\r\n                        cdMannager.setDeck(value);\r\n                        return value;\r\n                        //@ts-ignore\r\n                    }} renderItem={c => `${Utils.String.UppercaseFirst(c)} Deck`} onCreate={e=>e} loading={false} style={{width: 240}} data={decks} keygen={(value: string)=>value} placeholder=\"Select your deck\"/>\r\n                </nav>\r\n                <div>\r\n                    <div id=\"left\"></div>\r\n                    <div id=\"right\"></div>\r\n                    <div id=\"right-profile\">\r\n                        <Image shape=\"circle\" width={150} height={150} title=\"user_logo\" src={opponentData.logo}/>\r\n                        <h4>{opponentData.name}</h4>\r\n                        <p>Status: {opponentData.status}</p>\r\n                        {mode === \"singleplayer\" ?  <Select onCreate={e=>e} onChange={(value)=>{\r\n                            worker?.send(\"ai_difficlty\",{value});\r\n                        }} keygen={(value: any)=>value} data={[\"Easy\",\"Normal\",\"Hard\"]} defaultValue={[1]} style={{width: 120}} value={\"Normal\"}/> :<Button type=\"danger\" onClick={()=>{\r\n                            dispatchOpponent({type:\"user\", value:{status:\"Wating\", name:\"Wating for User\", logo:\"no_user\"}});\r\n                            worker?.send(\"kick\",{}); }\r\n                            }>Kick</Button>}\r\n                    </div>\r\n                    <div id=\"left-profile\">\r\n                        <Image shape=\"circle\" width={150} height={150} title=\"user_logo\" src={userData.logo}/>\r\n                        <h4>{userData.name}</h4>\r\n                        <p>Status: {userData.status.status}</p>\r\n                        <Button type={userData.status.button as ButtonTypes} onClick={()=>{\r\n                            if(cdMannager.deckSet){\r\n                                    dispatchUser({type:\"status\", value: userData.status.status === \"Ready\" ?  {status: \"Wating\", button: \"success\", text: \"Ready\"} : {status: \"Ready\", button: \"danger\", text: \"Unready\"}});\r\n                                    forceUpdate();\r\n                                    worker?.send(\"status_opponent\",{status:userData.status.status});\r\n                                   //checkCanStart();\r\n                            }else{\r\n                                //@ts-ignore\r\n                                Message.error('You need to select a deck!',5,{\r\n                                    position: \"bottom-right\",\r\n                                    title: \"Error\"\r\n                                });\r\n                            }\r\n                        }}>{userData.status.text}</Button>\r\n                    </div>\r\n                    <div id=\"center\">\r\n                        <h1>Join Code</h1>\r\n                                <Input style={{width: 240}}  placeholder=\"d853c4929da544aea121\" disabled defaultValue={code} value={code}/>\r\n                       {\r\n                       host ?  \r\n                        <Button \r\n                            loading={canStart()} \r\n                            type=\"primary\" \r\n                            onClick={()=>{ \r\n                                worker?.send(\"game_start\",{});\r\n                                routeTo(\"/game\",{query:{uuid: code, online: false}, replace: true});\r\n                            }}\r\n                        >Start</Button>\r\n                        : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n           </div>;\r\n}","import React from 'react';\r\nimport Sidenav from '../Sidenav';\r\nimport { Route} from \"react-router-dom\";\r\nimport PlayHome from './PlayHome';\r\nimport GameSetup from './GameSetup';\r\nexport default function Play(){\r\n    document.title = \"Kevin Online - Play\";\r\n    return <div id=\"play\">\r\n        <main>\r\n            <Route path=\"/play/:type\">\r\n                        <GameSetup/>\r\n            </Route>\r\n            <Route exact path=\"/play\">\r\n                <PlayHome/>\r\n            </Route>\r\n        </main>\r\n        <Sidenav activeTab={1}/>\r\n    </div>\r\n\r\n}","import React,{useEffect,useState} from 'react';\r\nimport Sidenav from './Sidenav';\r\nimport {Button, Image, Spin} from 'shineout';\r\nimport {useAuth0} from './AuthProvidor';\r\nexport default function Account(){\r\n    document.title = \"Kevin Online - Account\";\r\n    const [loggedin,setLoggedin] = useState<boolean>(false);\r\n     //@ts-ignore\r\n     const {loginWithRedirect, isAuthenticated, loading,user, logout} = useAuth0();\r\n    useEffect(()=>{\r\n        console.log(isAuthenticated);\r\n        \r\n        if(isAuthenticated){\r\n            setLoggedin(true);\r\n            console.log(user);\r\n        }else{\r\n            setLoggedin(false);\r\n        }\r\n    },[loading]);\r\n    return <div id=\"account\">\r\n        {\r\n            loading ? <section className=\"load-account\">\r\n                <Spin name=\"cube-grid\"></Spin>\r\n            </section> : \r\n                loggedin ?  \r\n                <section className=\"view-account\">\r\n                    <Image shape=\"circle\" width={200} height={200} src={user.picture}/>\r\n                    <div id=\"details\">\r\n                        <h1>{user.name}</h1>\r\n                        <p>{user.sub}</p>\r\n                        <hr/>\r\n                        <Button type=\"link\" href={`https://visualsource.000webhostapp.com/profile/${encodeURIComponent(user.sub)}`}>View Account</Button>\r\n                        <Button type=\"link\" onClick={()=>logout()}>Logout</Button>\r\n                    </div>\r\n                </section> : \r\n                 <section id=\"account-login\">\r\n                    <Button type=\"primary\" onClick={()=>loginWithRedirect()}>Login</Button>\r\n                </section>\r\n                \r\n        }\r\n       \r\n        <Sidenav activeTab={3}/>\r\n    </div>\r\n\r\n}","import React from 'react';\r\nimport Sidenav from './Sidenav';\r\nimport {Form, Slider} from 'shineout';\r\n\r\nfunction handleSubmit(data: any){}\r\nexport default function Settings(){\r\n    document.title = \"Kevin Online - Settings\";\r\n    return <div id=\"settings\">\r\n        <div id=\"settings-content\">\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Item label=\"Audio\" labelAlign=\"top\">\r\n                    <Slider value={100}/>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n        <Sidenav activeTab={4}/>\r\n    </div>\r\n\r\n}","import React from 'react';\nimport { Router, Route} from \"react-router-dom\";\nimport Sidenav from './Sidenav';\nimport {history} from '../utils/history';\nimport DeckEditor from './editor/DeckEditor';\nimport Game from '../game/Game';\nimport Play from './play/Play';\nimport Account from './Account';\nimport Settings from './Settings';\nfunction MainMenu(){\n  document.title = \"Kevin Online - Home\";\n  return <div id=\"main-menu\">\n           <section className=\"animated-grid\">\n              <div className=\"card\">a</div>\n              <div className=\"card\">b</div>\n              <div className=\"card\">c</div>\n              <div className=\"card\">d</div>\n              <div className=\"card\">e</div>\n              <div className=\"card\">f</div>\n              <div className=\"card\">g</div>\n              <div className=\"card\">h</div>\n              <div className=\"card\">i</div>\n              <div className=\"card\">j</div>\n              <div className=\"card\">k</div>\n              <div className=\"card\">l</div>\n              <div className=\"card\">main</div>\n          </section>\n            <Sidenav activeTab={0}/>\n         </div>\n}\n\nfunction App() {\n  return (\n    <Router history={history}>\n        <Route exact path=\"/\">\n            <MainMenu/>\n        </Route>\n        <Route path=\"/editor\">\n          <DeckEditor/> \n        </Route>\n        <Route path='/game'>\n            <Game/>\n        </Route>\n        <Route path=\"/play\">\n            <Play/>\n        </Route>\n        <Route path=\"/account\">\n            <Account/>\n        </Route>\n        <Route path=\"/settings\">\n            <Settings/>\n        </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","import {} from 'shineout';\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          //@ts-ignore\n          Message.info('This web app is being served cache-first by a service worker.',10,{ position: 'top-right' });\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              //@ts-ignore\n              Message.info('New content is available and will be used when all tabs for this page are closed.' ,10,{ position: 'top-right' });\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n               //@ts-ignore\n               Message.info('Content is cached for offline use.' ,10,{ position: 'top-right' });\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Auth0Provider} from './components/AuthProvidor';\nimport {history} from './utils/history';\nimport {JsonLoader} from '@visualsource/vs_api';\nimport 'shineout/dist/theme.default.css';\nimport './style/index.sass';\nconst onRedirectCallback = (appState: any) => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\nJsonLoader.createInst({url:\"http://localhost:8000/\", part:\"Kevin/db\", cache_id: \"card-cache\"}).fetch();\nJsonLoader.getInst().checkVersion(\"version\",\"Kevin/profile\");\nReactDOM.render(\n  <Auth0Provider \n    domain={\"visualsource.auth0.com\"}\n    client_id={\"gRqZG9p2sUKSntmbI9pj5YNZqeEJohWP\"}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n    >\n    <App />\n  </Auth0Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}